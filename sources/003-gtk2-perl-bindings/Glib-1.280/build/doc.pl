# THIS FILE IS AUTOMATICALLY GENERATED - ANY CHANGES WILL BE LOST
# generated by Makefile.PL Fri Jan 18 23:13:45 2013
# input files:
#   Glib.xs
#   GError.xs
#   GUtils.xs
#   GLog.xs
#   GType.xs
#   GBoxed.xs
#   GObject.xs
#   GValue.xs
#   GClosure.xs
#   GSignal.xs
#   GMainLoop.xs
#   GIOChannel.xs
#   GParamSpec.xs
#   GKeyFile.xs
#   GOption.xs
#   GBookmarkFile.xs
#

$xspods = [
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=head2 Miscellaneous',
                           '',
                           'Various useful utilities defined in Glib.xs.',
                           '',
                           '=over',
                           '',
                           '=item GPERL_CALL_BOOT(name)',
                           '',
                           'call the boot code of a module by symbol rather than by name.',
                           '',
                           'in a perl extension which uses several xs files but only one pm, you',
                           'need to bootstrap the other xs files in order to get their functions',
                           'exported to perl.  if the file has MODULE = Foo::Bar, the boot symbol',
                           'would be boot_Foo__Bar.',
                           '',
                           '=item void _gperl_call_XS (pTHX_ void (*subaddr) (pTHX_ CV *), CV * cv, SV ** mark);',
                           '',
                           'never use this function directly.  see C<GPERL_CALL_BOOT>.',
                           '',
                           'for the curious, this calls a perl sub by function pointer rather than',
                           'by name; call_sv requires that the xsub already be registered, but we',
                           'need this to call a function which will register xsubs.  this is an',
                           'evil hack and should not be used outside of the GPERL_CALL_BOOT macro.',
                           'it\'s implemented as a function to avoid code size bloat, and exported',
                           'so that extension modules can pull the same trick.',
                           '',
                           '=cut'
                         ],
              'line' => '23'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item gpointer gperl_alloc_temp (int nbytes)',
                           '',
                           'Allocate and return a pointer to an I<nbytes>-long, zero-initialized,',
                           'temporary buffer that will be reaped at the next garbage collection sweep.',
                           'This is handy for allocating things that need to be alloc\'ed before a croak',
                           '(since croak doesn\'t return and give you the chance to free them).  The',
                           'trick is that the memory is allocated in a mortal perl scalar.  See the',
                           'perl online manual for notes on using this technique.',
                           '',
                           'Do B<not> under any circumstances attempt to call g_free(), free(), or any',
                           'other deallocator on this pointer, or you will crash the interpreter.',
                           '',
                           '=cut'
                         ],
              'line' => '60'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item gchar *gperl_filename_from_sv (SV *sv)',
                           '',
                           'Return a localized version of the filename in the sv, using',
                           'g_filename_from_utf8 (and consequently this function might croak). The',
                           'memory is allocated using gperl_alloc_temp.',
                           '',
                           '=cut'
                         ],
              'line' => '89'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item SV *gperl_sv_from_filename (const gchar *filename)',
                           '',
                           'Convert the filename into an utf8 string as used by gtk/glib and perl.',
                           '',
                           '=cut'
                         ],
              'line' => '119'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item gboolean gperl_str_eq (const char * a, const char * b);',
                           '',
                           'Compare a pair of ascii strings, considering \'-\' and \'_\' to be equivalent.',
                           'Used for things like enum value nicknames and signal names.',
                           '',
                           '=cut'
                         ],
              'line' => '142'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item guint gperl_str_hash (gconstpointer key)',
                           '',
                           'Like g_str_hash(), but considers \'-\' and \'_\' to be equivalent.',
                           '',
                           '=cut'
                         ],
              'line' => '163'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item GPerlArgv * gperl_argv_new ()',
                           '',
                           'Creates a new Perl argv object whose members can then be passed to functions',
                           'that request argc and argv style arguments.',
                           '',
                           'If the called function(s) modified argv, you can call L<gperl_argv_update> to',
                           'update Perl\'s @ARGV in the same way.',
                           '',
                           'Remember to call L<gperl_argv_free> when you\'re done.',
                           '',
                           '=cut'
                         ],
              'line' => '181'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item void gperl_argv_update (GPerlArgv *pargv)',
                           '',
                           'Updates @ARGV to resemble the stored argv array.',
                           '',
                           '=cut'
                         ],
              'line' => '241'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item void gperl_argv_free (GPerlArgv *pargv)',
                           '',
                           'Frees any resources associated with I<pargv>.',
                           '',
                           '=cut'
                         ],
              'line' => '260'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item char * gperl_format_variable_for_output (SV * sv)',
                           '',
                           'Formats the variable stored in I<sv> for output in error messages.  Like',
                           'SvPV_nolen(), but ellipsizes real strings (i.e., not stringified references)',
                           'at 20 chars to trim things down for error messages.',
                           '',
                           '=cut'
                         ],
              'line' => '273'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item gboolean gperl_sv_is_defined (SV *sv)',
                           '',
                           'Checks the SV I<sv> for definedness just like Perl\'s I<defined()> would do.',
                           'Most importantly, it correctly handles "magical" SVs, unlike bare I<SvOK>.',
                           'It\'s also NULL-safe.',
                           '',
                           '=cut'
                         ],
              'line' => '299'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=item void gperl_hv_take_sv (HV *hv, const char *key, size_t key_length, SV *sv)',
                           '',
                           'Tries to store I<sv> in I<hv>.  Decreases I<sv>\'s reference count if something',
                           'goes wrong.',
                           '',
                           '=cut'
                         ],
              'line' => '339'
            },
            {
              'filename' => 'Glib.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '353'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=head2 GError Exception Objects',
                           '',
                           'GError is a facility for propagating run-time error / exception information',
                           'around in C, which is a language without native support for exceptions.',
                           'GError uses a simple error code, usually defined as an enum.  Since the',
                           'enums will overlap, GError includes the GQuark corresponding to a particular',
                           'error "domain" to tell you which error codes will be used.  There\'s also a',
                           'string containing a specific error message.  The strings are arbitrary, and',
                           'may be translated, but the domains and codes are definite.',
                           '',
                           'Perl has native support for exceptions, using C<eval> as "try", C<croak> or',
                           'C<die> as "throw", and C<< if ($@) >> as "catch".  C<$@> may, in fact, be',
                           'any scalar, including blessed objects.',
                           '',
                           'So, GPerl maps GLib\'s GError to Perl exceptions.',
                           '',
                           'Since, as we described above, error messages are not guaranteed to be unique',
                           'everywhere, we need to support the use of the error domains and codes.',
                           'The obvious choice here is to use exception objects; however, to support',
                           'blessed exception objects, we must perform a little bit of black magic in',
                           'the bindings.   There is no built-in association between an error domain',
                           'quark and the GType of the corresponding error code enumeration, so the',
                           'bindings supply both of these when specifying the name of the package into',
                           'which to bless exceptions of this domain.  All GError-based exceptions ',
                           'derive from Glib::Error, of course, and this base class provides all of the',
                           'functionality, including stringification.',
                           '',
                           'All you\'ll really ever need to do is register error domains with',
                           'C<gperl_register_error_domain>, and throw errors with C<gperl_croak_gerror>.',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '24'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=item void gperl_register_error_domain (GQuark domain, GType error_enum, const char * package)',
                           '',
                           'Tell the bindings to bless GErrors with error->domain == I<domain> into',
                           'I<package>, and use I<error_enum> to find the nicknames for the error codes.',
                           'This will call C<gperl_set_isa> on I<package> to add "Glib::Error" to',
                           'I<package>\'s @ISA.',
                           '',
                           'I<domain> may not be 0, and I<package> may not be NULL; what would be the ',
                           'point?  I<error_enum> may be 0, in which case you\'ll get no fancy stringified',
                           'error values.',
                           '',
                           '=cut'
                         ],
              'line' => '89'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=item SV * gperl_sv_from_gerror (GError * error)',
                           '',
                           'You should rarely, if ever, need to call this function.  This is what turns',
                           'a GError into a Perl object.',
                           '',
                           '=cut'
                         ],
              'line' => '156'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=item gperl_gerror_from_sv (SV * sv, GError ** error)',
                           '',
                           'You should rarely need this function.  This parses a perl data structure into',
                           'a GError.  If I<sv> is undef (or the empty string), sets *I<error> to NULL,',
                           'otherwise, allocates a new GError with C<g_error_new_literal()> and writes',
                           'through I<error>; the caller is responsible for calling C<g_error_free()>.',
                           '(gperl_croak_gerror() does this, for example.)',
                           '',
                           '=cut'
                         ],
              'line' => '197'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=item void gperl_croak_gerror (const char * ignored, GError * err)',
                           '',
                           'Croak with an exception based on I<err>.  I<err> may not be NULL.  I<ignored>',
                           'exists for backward compatibility, and is, well, ignored.  This function',
                           'calls croak(), which does not return.',
                           '',
                           'Since croak() does not return, this function handles the magic behind ',
                           'not leaking the memory associated with the #GError.  To use this you\'d',
                           'do something like',
                           '',
                           ' PREINIT:',
                           '   GError * error = NULL;',
                           ' CODE:',
                           '   if (!funtion_that_can_fail (something, &error))',
                           '      gperl_croak_gerror (NULL, error);',
                           '',
                           'It\'s just that simple!',
                           '',
                           '=cut'
                         ],
              'line' => '286'
            },
            {
              'filename' => 'GError.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '320'
            },
            {
              'filename' => 'GLog.xs',
              'lines' => [
                           '=head2 GLog',
                           '',
                           'GLib has a message logging mechanism which it uses for the g_return_if_fail()',
                           'assertion macros, etc.; it\'s really versatile and allows you to set various',
                           'levels to be fatal and whatnot.  Libraries use these for various types of',
                           'message reporting.',
                           '',
                           'These functions let you reroute those messages from Perl.  By default, ',
                           'the warning, critical, and message levels go through perl\'s warn(), and',
                           'fatal ones go through croak().  [i\'m not sure that these get to croak()',
                           'before GLib abort()s on them...]',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '24'
            },
            {
              'filename' => 'GLog.xs',
              'lines' => [
                           '=item gint gperl_handle_logs_for (const gchar * log_domain)',
                           '',
                           'Route all g_logs for I<log_domain> through gperl\'s log handling.  You\'ll',
                           'have to register domains in each binding submodule, because there\'s no way',
                           'we can know about them down here.',
                           '',
                           'And, technically, this traps all the predefined log levels, not any of',
                           'the ones you (or your library) may define for yourself.',
                           '',
                           '=cut'
                         ],
              'line' => '162'
            },
            {
              'filename' => 'GLog.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '179'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=head2 GType / GEnum / GFlags',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '21'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item void gperl_register_fundamental (GType gtype, const char * package)',
                           '',
                           'register a mapping between I<gtype> and I<package>.  this is for "fundamental"',
                           'types which have no other requirements for metadata storage, such as GEnums,',
                           'GFlags, or real GLib fundamental types like G_TYPE_INT, G_TYPE_FLOAT, etc.',
                           '',
                           '=cut'
                         ],
              'line' => '72'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item void gperl_register_fundamental_alias (GType gtype, const char * package)',
                           '',
                           'Makes I<package> an alias for I<type>.  This means that the package name',
                           'specified by I<package> will be mapped to I<type> by',
                           'I<gperl_fundamental_type_from_package>, but',
                           'I<gperl_fundamental_package_from_type> won\'t map I<type> to I<package>.  This',
                           'is useful if you want to change the canonical package name of a type while',
                           'preserving backwards compatibility with code which uses I<package> to specify',
                           'I<type>.',
                           '',
                           'In order for this to make sense, another package name should be registered for',
                           'I<type> with I<gperl_register_fundamental> or',
                           'I<gperl_register_fundamental_full>.',
                           '',
                           '=cut'
                         ],
              'line' => '114'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item GPerlValueWrapperClass',
                           '',
                           'Specifies the vtable that is to be used to convert fundamental types to and',
                           'from Perl variables.',
                           '',
                           '  typedef struct _GPerlValueWrapperClass GPerlValueWrapperClass;',
                           '  struct _GPerlValueWrapperClass {',
                           '          GPerlValueWrapFunc   wrap;',
                           '          GPerlValueUnwrapFunc unwrap;',
                           '  };',
                           '',
                           'The members are function pointers, each of which serves a specific purpose:',
                           '',
                           '=over',
                           '',
                           '=item GPerlValueWrapFunc',
                           '',
                           'Turns I<value> into an SV.  The caller assumes ownership of the SV.  I<value>',
                           'is not to be modified.',
                           '',
                           '  typedef SV*  (*GPerlValueWrapFunc)   (const GValue * value);',
                           '',
                           '=item GPerlValueUnwrapFunc',
                           '',
                           'Turns I<sv> into its fundamental representation and stores the result in the',
                           'pre-configured I<value>.  I<value> must not be overwritten; instead one of the',
                           'various C<g_value_set_*()> functions must be used or the C<value-E<gt>data>',
                           'pointer must be modifed directly.',
                           '',
                           '  typedef void (*GPerlValueUnwrapFunc) (GValue       * value,',
                           '                                        SV           * sv);',
                           '',
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '153'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item void gperl_register_fundamental_full (GType gtype, const char * package, GPerlValueWrapperClass * wrapper_class)',
                           '',
                           'Like L<gperl_register_fundamental>, registers a mapping between I<gtype> and',
                           'I<package>.  In addition, this also installs the function pointers in',
                           'I<wrapper_class> as the handlers for the type.  See L<GPerlValueWrapperClass>.',
                           '',
                           'I<gperl_register_fundamental_full> does not copy the contents of',
                           'I<wrapper_class> -- it assumes that I<wrapper_class> is statically allocated',
                           'and that it will be valid for the whole lifetime of the program.',
                           '',
                           '=cut'
                         ],
              'line' => '189'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item GType gperl_fundamental_type_from_package (const char * package)',
                           '',
                           'look up the GType corresponding to a I<package> registered by',
                           'gperl_register_fundamental().',
                           '',
                           '=cut'
                         ],
              'line' => '218'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item const char * gperl_fundamental_package_from_type (GType gtype)',
                           '',
                           'look up the package corresponding to a I<gtype> registered by',
                           'gperl_register_fundamental().',
                           '',
                           '=cut'
                         ],
              'line' => '251'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item GPerlValueWrapperClass * gperl_fundamental_wrapper_class_from_type (GType gtype)',
                           '',
                           'look up the wrapper class corresponding to a I<gtype> that has previously been',
                           'registered with gperl_register_fundamental_full().',
                           '',
                           '=cut'
                         ],
              'line' => '268'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item gboolean gperl_try_convert_enum (GType gtype, SV * sv, gint * val)',
                           '',
                           'return FALSE if I<sv> can\'t be mapped to a valid member of the registered',
                           'enum type I<gtype>; otherwise, return TRUE write the new value to the',
                           'int pointed to by I<val>.',
                           '',
                           'you\'ll need this only in esoteric cases.',
                           '',
                           '=cut'
                         ],
              'line' => '312'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item gint gperl_convert_enum (GType type, SV * val)',
                           '',
                           'croak if I<val> is not part of I<type>, otherwise return corresponding value',
                           '',
                           '=cut'
                         ],
              'line' => '341'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * gperl_convert_back_enum_pass_unknown (GType type, gint val)',
                           '',
                           'return a scalar containing the nickname of the enum value I<val>, or the',
                           'integer value of I<val> if I<val> is not a member of the enum I<type>.',
                           '',
                           '=cut'
                         ],
              'line' => '378'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * gperl_convert_back_enum (GType type, gint val)',
                           '',
                           'return a scalar which is the nickname of the enum value val, or croak if',
                           'val is not a member of the enum.',
                           '',
                           '=cut'
                         ],
              'line' => '397'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item gboolean gperl_try_convert_flag (GType type, const char * val_p, gint * val)',
                           '',
                           'like gperl_try_convert_enum(), but for GFlags.',
                           '',
                           '=cut'
                         ],
              'line' => '418'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item gint gperl_convert_flag_one (GType type, const char * val)',
                           '',
                           'croak if I<val> is not part of I<type>, otherwise return corresponding value.',
                           '',
                           '=cut'
                         ],
              'line' => '441'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item gint gperl_convert_flags (GType type, SV * val)',
                           '',
                           'collapse a list of strings to an integer with all the correct bits set,',
                           'croak if anything is invalid.',
                           '',
                           '=cut'
                         ],
              'line' => '475'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * gperl_convert_back_flags (GType type, gint val)',
                           '',
                           'convert a bitfield to a list of strings.',
                           '',
                           '=cut'
                         ],
              'line' => '520'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 Inheritance management',
                           '',
                           '=over',
                           '',
                           '=item void gperl_set_isa (const char * child_package, const char * parent_package)',
                           '',
                           'tell perl that I<child_package> inherits I<parent_package>, after whatever else',
                           'is already there.  equivalent to C<< push @{$parent_package}::ISA, $child_package; >>',
                           '',
                           '=cut'
                         ],
              'line' => '543'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item void gperl_prepend_isa (const char * child_package, const char * parent_package)',
                           '',
                           'tell perl that I<child_package> inherits I<parent_package>, but before whatever',
                           'else is already there.  equivalent to C<< unshift @{$parent_package}::ISA, $child_package; >>',
                           '',
                           '=cut'
                         ],
              'line' => '571'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item GType gperl_type_from_package (const char * package)',
                           '',
                           'Look up the GType associated with I<package>, regardless of how it was',
                           'registered.  Returns 0 if no mapping can be found.',
                           '',
                           '=cut'
                         ],
              'line' => '594'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item const char * gperl_package_from_type (GType gtype)',
                           '',
                           'Look up the name of the package associated with I<gtype>, regardless of how it',
                           'was registered.  Returns NULL if no mapping can be found.',
                           '',
                           '=cut'
                         ],
              'line' => '623'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 Boxed type support for SV',
                           '',
                           'In order to allow GValues to hold perl SVs we need a GBoxed wrapper.',
                           '',
                           '=over',
                           '',
                           '=item GPERL_TYPE_SV',
                           '',
                           'Evaluates to the GType for SVs.  The bindings register a mapping between',
                           'GPERL_TYPE_SV and the package \'Glib::Scalar\' with gperl_register_boxed().',
                           '',
                           '=item SV * gperl_sv_copy (SV * sv)',
                           '',
                           'implemented as C<< newSVsv (sv) >>.',
                           '',
                           '=item void gperl_sv_free (SV * sv)',
                           '',
                           'implemented as C<< SvREFCNT_dec (sv) >>.',
                           '',
                           '=cut'
                         ],
              'line' => '653'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 UTF-8 strings with gchar',
                           '',
                           'By convention, gchar* is assumed to point to UTF8 string data,',
                           'and char* points to ascii string data.  Here we define a pair of',
                           'wrappers for the boilerplate of upgrading Perl strings.  They',
                           'are implemented as functions rather than macros, because comma',
                           'expressions in macros are not supported by all compilers.',
                           '',
                           'These functions should be used instead of newSVpv and SvPV_nolen',
                           'in all cases which deal with gchar* types.',
                           '',
                           '=over',
                           '',
                           '=item gchar * SvGChar (SV * sv)',
                           '',
                           'extract a UTF8 string from I<sv>.',
                           '',
                           '=cut'
                         ],
              'line' => '700'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * newSVGChar (const gchar * str)',
                           '',
                           'copy a UTF8 string into a new SV.  if str is NULL, returns &PL_sv_undef.',
                           '',
                           '=cut'
                         ],
              'line' => '728'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 64 bit integers',
                           '',
                           'On 32 bit machines and even on some 64 bit machines, perl\'s IV/UV data type can',
                           'only hold 32 bit values.  The following functions therefore convert 64 bit',
                           'integers to and from Perl strings if normal IV/UV conversion does not suffice.',
                           '',
                           '=over',
                           '',
                           '=item gint64 SvGInt64 (SV *sv)',
                           '',
                           'Converts the string in I<sv> to a signed 64 bit integer.  If appropriate, uses',
                           'C<SvIV> instead.',
                           '',
                           '=cut'
                         ],
              'line' => '746'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * newSVGInt64 (gint64 value)',
                           '',
                           'Creates a PV from the signed 64 bit integer in I<value>.  If appropriate, uses',
                           'C<newSViv> instead.',
                           '',
                           '=cut'
                         ],
              'line' => '795'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item guint64 SvGUInt64 (SV *sv)',
                           '',
                           'Converts the string in I<sv> to an unsigned 64 bit integer.  If appropriate,',
                           'uses C<SvUV> instead.',
                           '',
                           '=cut'
                         ],
              'line' => '821'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=item SV * newSVGUInt64 (guint64 value)',
                           '',
                           'Creates a PV from the unsigned 64 bit integer in I<value>.  If appropriate,',
                           'uses C<newSVuv> instead.',
                           '',
                           '=cut'
                         ],
              'line' => '852'
            },
            {
              'filename' => 'GType.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '1894'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=head2 GBoxed',
                           '',
                           '=over',
                           '',
                           '=item GPerlBoxedWrapperClass',
                           '',
                           'Specifies the vtable of functions to be used for bringing boxed types in',
                           'and out of perl.  The structure is defined like this:',
                           '',
                           ' typedef struct _GPerlBoxedWrapperClass GPerlBoxedWrapperClass;',
                           ' struct _GPerlBoxedWrapperClass {',
                           '          GPerlBoxedWrapFunc    wrap;',
                           '          GPerlBoxedUnwrapFunc  unwrap;',
                           '          GPerlBoxedDestroyFunc destroy;',
                           ' };',
                           '',
                           'The members are function pointers, each of which serves a specific purpose:',
                           '',
                           '=over',
                           '',
                           '=item GPerlBoxedWrapFunc',
                           '',
                           'turn a boxed pointer into an SV.  gtype is the type of the boxed pointer,',
                           'and package is the package to which that gtype is registered (the lookup',
                           'has already been done for you at this point).  if own is true, the wrapper',
                           'is responsible for freeing the object; if it is false, some other code ',
                           'owns the object and you must NOT free it.',
                           '',
                           ' typedef SV*      (*GPerlBoxedWrapFunc)    (GType        gtype,',
                           '                                            const char * package,',
                           '                                            gpointer     boxed,',
                           '                                            gboolean     own);',
                           '',
                           '=item GPerlBoxedUnwrapFunc',
                           '',
                           'turn an SV into a boxed pointer.  like GPerlBoxedWrapFunc, gtype and package',
                           'are the registered type pair, already looked up for you (in the process of',
                           'finding the proper wrapper class).  sv is the sv to unwrap.',
                           '',
                           ' typedef gpointer (*GPerlBoxedUnwrapFunc)  (GType        gtype,',
                           '                                            const char * package,',
                           '                                            SV         * sv);',
                           '',
                           '=item GPerlBoxedDestroyFunc',
                           '',
                           'this will be called by Glib::Boxed::DESTROY, when the wrapper is destroyed.',
                           'it is a hook that allows you to destroy an object owned by the wrapper;',
                           'note, however, that you will have had to keep track yourself of whether',
                           'the object was to be freed.',
                           '',
                           ' typedef void     (*GPerlBoxedDestroyFunc) (SV         * sv);',
                           '',
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '21'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item void gperl_register_boxed (GType gtype, const char * package, GPerlBoxedWrapperClass * wrapper_class)',
                           '',
                           'Register a mapping between the GBoxed derivative I<gtype> and I<package>.  The',
                           'specified, I<wrapper_class> will be used to wrap and unwrap objects of this',
                           'type; you may pass NULL to use the default wrapper (the same one returned by',
                           'gperl_default_boxed_wrapper_class()).',
                           '',
                           'In normal usage, the standard opaque wrapper supplied by the library is',
                           'sufficient and correct.  In some cases, however, you want a boxed type to map',
                           'directly to a native perl type; for example, some struct may be more',
                           'appropriately represented as a hash in perl.  Since the most necessary place',
                           'for this conversion to happen is in gperl_value_from_sv() and',
                           'gperl_sv_from_value(), the only reliable and robust way to implement this ',
                           'is a hook into gperl_get_boxed_check() and gperl_new_boxed(); that is',
                           'exactly the purpose of I<wrapper_class>.  See C<GPerlBoxedWrapperClass>.',
                           '',
                           'I<gperl_register_boxed> does not copy the contents of I<wrapper_class> -- it',
                           'assumes that I<wrapper_class> is statically allocated and that it will be valid',
                           'for the whole lifetime of the program.',
                           '',
                           '=cut'
                         ],
              'line' => '154'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item void gperl_register_boxed_alias (GType gtype, const char * package)',
                           '',
                           'Makes I<package> an alias for I<type>.  This means that the package name',
                           'specified by I<package> will be mapped to I<type> by',
                           'I<gperl_boxed_type_from_package>, but I<gperl_boxed_package_from_type> won\'t',
                           'map I<type> to I<package>.  This is useful if you want to change the canonical',
                           'package name of a type while preserving backwards compatibility with code which',
                           'uses I<package> to specify I<type>.',
                           '',
                           'In order for this to make sense, another package name should be registered for',
                           'I<type> with I<gperl_register_boxed>.',
                           '',
                           '=cut'
                         ],
              'line' => '230'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item void gperl_register_boxed_synonym (GType registered_gtype, GType synonym_gtype)',
                           '',
                           'Registers I<synonym_gtype> as a synonym for I<registered_gtype>.  All boxed',
                           'objects of type I<synonym_gtype> will then be treated as if they were of type',
                           'I<registered_gtype>, and I<gperl_boxed_package_from_type> will return the',
                           'package associated with I<registered_gtype>.',
                           '',
                           'I<registered_gtype> must have been registered with I<gperl_register_boxed>',
                           'already.',
                           '',
                           '=cut'
                         ],
              'line' => '268'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item GType gperl_boxed_type_from_package (const char * package)',
                           '',
                           'Look up the GType associated with package I<package>.  Returns 0 if I<type> is',
                           'not registered.',
                           '',
                           '=cut'
                         ],
              'line' => '304'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item const char * gperl_boxed_package_from_type (GType type)',
                           '',
                           'Look up the package associated with GBoxed derivative I<type>.  Returns NULL if',
                           'I<type> is not registered.',
                           '',
                           '=cut'
                         ],
              'line' => '327'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item GPerlBoxedWrapperClass * gperl_default_boxed_wrapper_class (void)',
                           '',
                           'get a pointer to the default wrapper class; handy if you want to use',
                           'the normal wrapper, with minor modifications.  note that you can just',
                           'pass NULL to gperl_register_boxed(), so you really only need this in',
                           'fringe cases.',
                           '',
                           '=cut'
                         ],
              'line' => '462'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item SV * gperl_new_boxed (gpointer boxed, GType gtype, gboolean own)',
                           '',
                           'Export a GBoxed derivative to perl, according to whatever',
                           'GPerlBoxedWrapperClass is registered for I<gtype>.  In the default',
                           'implementation, this means wrapping an opaque perl object around the pointer',
                           'to a small wrapper structure which stores some metadata, such as whether',
                           'the boxed structure should be destroyed when the wrapper is destroyed',
                           '(controlled by I<own>; if the wrapper owns the object, the wrapper is in',
                           'charge of destroying it\'s data).',
                           '',
                           'This function might end up calling other Perl code, so if you use it in XS code',
                           'for a generic GType, make sure the stack pointer is set up correctly before the',
                           'call, and restore it after the call.',
                           '',
                           '=cut'
                         ],
              'line' => '479'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item SV * gperl_new_boxed_copy (gpointer boxed, GType gtype)',
                           '',
                           'Create a new copy of I<boxed> and return an owner wrapper for it.',
                           'I<boxed> may not be NULL.  See C<gperl_new_boxed>.',
                           '',
                           '=cut'
                         ],
              'line' => '533'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=item gpointer gperl_get_boxed_check (SV * sv, GType gtype)',
                           '',
                           'Extract the boxed pointer from a wrapper; croaks if the wrapper I<sv> is not',
                           'blessed into a derivative of the expected I<gtype>.  Does not allow undef.',
                           '',
                           '=cut'
                         ],
              'line' => '549'
            },
            {
              'filename' => 'GBoxed.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '584'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=head2 GObject',
                           '',
                           'To deal with the intricate interaction of the different reference-counting',
                           'semantics of Perl objects versus GObjects, the bindings create a combined',
                           'PerlObject+GObject, with the GObject\'s pointer in magic attached to the Perl',
                           'object, and the Perl object\'s pointer in the GObject\'s user data.  Thus it\'s',
                           'not really a "wrapper", but we refer to it as one, because "combined Perl',
                           'object + GObject" is a cumbersome and confusing mouthful.',
                           '',
                           'GObjects are represented as blessed hash references.  The GObject user data',
                           'mechanism is not typesafe, and thus is used only for unsigned integer values;',
                           'the Perl-level hash is available for any type of user data.  The combined',
                           'nature of the wrapper means that data stored in the hash will stick around as',
                           'long as the object is alive.',
                           '',
                           'Since the C pointer is stored in attached magic, the C pointer is not available',
                           'to the Perl developer via the hash object, so there\'s no need to worry about',
                           'breaking it from perl.',
                           '',
                           'Propers go to Marc Lehmann for dreaming most of this up.',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '28'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item void gperl_register_object (GType gtype, const char * package)',
                           '',
                           'tell the GPerl type subsystem what Perl package corresponds with a given',
                           'GObject by GType.  automagically sets up @I<package>::ISA for you.',
                           '',
                           'note that @ISA will not be created for gtype until gtype\'s parent has',
                           'been registered.  if you are experiencing strange problems with a class\'',
                           '@ISA not being set up, change the order in which you register them.',
                           '',
                           '=cut'
                         ],
              'line' => '371'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item void gperl_register_object_alias (GType gtype, const char * package)',
                           '',
                           'Makes I<package> an alias for I<type>.  This means that the package name',
                           'specified by I<package> will be mapped to I<type> by',
                           'I<gperl_object_type_from_package>, but I<gperl_object_package_from_type> won\'t',
                           'map I<type> to I<package>.  This is useful if you want to change the canonical',
                           'package name of a type while preserving backwards compatibility with code which',
                           'uses I<package> to specify I<type>.',
                           '',
                           'In order for this to make sense, another package name should be registered for',
                           'I<type> with I<gperl_register_object>.',
                           '',
                           '=cut'
                         ],
              'line' => '448'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item void gperl_register_sink_func (GType gtype, GPerlObjectSinkFunc func)',
                           '',
                           'Tell gperl_new_object() to use I<func> to claim ownership of objects derived',
                           'from I<gtype>.',
                           '',
                           'gperl_new_object() always refs a GObject when wrapping it for the first time.',
                           'To have the Perl wrapper claim ownership of a GObject as part of',
                           'gperl_new_object(), you unref the object after ref\'ing it. however, different',
                           'GObject subclasses have different ways to claim ownership; for example,',
                           'GtkObject simply requires you to call gtk_object_sink().  To make this concept',
                           'generic, this function allows you to register a function to be called when then',
                           'wrapper should claim ownership of the object.  The I<func> registered for a',
                           'given I<type> will be called on any object for which C<< g_type_isa',
                           '(G_TYPE_OBJECT (object), type) >> succeeds.',
                           '',
                           'If no sinkfunc is found for an object, g_object_unref() will be used.',
                           '',
                           'Even though GObjects don\'t need sink funcs, we need to have them in Glib',
                           'as a hook for upstream objects.  If we create a GtkObject (or any',
                           'other type of object which uses a different way to claim ownership) via',
                           'Glib::Object->new, any upstream wrappers, such as gtk2perl_new_object(), will',
                           'B<not> be called.  Having a sink func facility down here enables us always to',
                           'do the right thing.',
                           '',
                           '=cut'
                         ],
              'line' => '487'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item void gperl_object_set_no_warn_unreg_subclass (GType gtype, gboolean nowarn)',
                           '',
                           'In versions 1.00 through 1.10x of Glib, the bindings required all types',
                           'to be registered ahead of time.  Upon encountering an unknown type, the',
                           'bindings would emit a warning to the effect of "unknown type \'Foo\';',
                           'representing as first known parent type \'Bar\'".  However, for some',
                           'types, such as GtkStyle or GdkGC, the actual object returned is an',
                           'instance of a child type of a private implementation (e.g., a theme',
                           'engine ("BlueCurveStyle") or gdk backend ("GdkGCX11")); we neither can',
                           'nor should have registered names for these types.  Therefore, it is',
                           'possible to tell the bindings not to warn about these unregistered',
                           'subclasses, and simply represent them as the parent type.',
                           '',
                           'With 1.12x, the bindings will automatically register unknown classes',
                           'into the namespace Glib::Object::_Unregistered to avoid possible',
                           'breakage resulting from unknown ancestors of known children.  To',
                           'preserve the old registered-as-unregistered behavior, the value',
                           'installed by this function is used to prevent the _Unregistered mapping',
                           'for such private backend classes.',
                           '',
                           '',
                           'Note: this assumes I<gtype> has already been registered with',
                           'gperl_register_object().',
                           '',
                           '=cut'
                         ],
              'line' => '582'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item const char * gperl_object_package_from_type (GType gtype)',
                           '',
                           'Get the package corresponding to I<gtype>.  If I<gtype> is not a GObject',
                           'or GInterface, returns NULL.  If I<gtype> is not registered to a package',
                           'name, a new name of the form C<Glib::Object::_Unregistered::$c_type_name>',
                           'will be created, used to register the class, and then returned.',
                           '',
                           '=cut'
                         ],
              'line' => '646'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item HV * gperl_object_stash_from_type (GType gtype)',
                           '',
                           'Get the stash corresponding to I<gtype>; returns NULL if I<gtype> is',
                           'not registered.  The stash is useful for C<bless>ing.',
                           '',
                           '=cut'
                         ],
              'line' => '719'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item GType gperl_object_type_from_package (const char * package)',
                           '',
                           'Inverse of gperl_object_package_from_type(),  returns 0 if I<package>',
                           'is not registered.',
                           '',
                           '=cut'
                         ],
              'line' => '737'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item SV * gperl_new_object (GObject * object, gboolean own)',
                           '',
                           'Use this function to get the perl part of a GObject.  If I<object>',
                           'has never been seen by perl before, a new, empty perl object will',
                           'be created and added to a private key under I<object>\'s qdata.  If',
                           'I<object> already has a perl part, a new reference to it will be',
                           'created. The gobject + perl object together form a combined object that',
                           'is properly refcounted, i.e. both parts will stay alive as long as at',
                           'least one of them is alive, and only when both perl object and gobject are',
                           'no longer referenced will both be freed.',
                           '',
                           'The perl object will be blessed into the package corresponding to the GType',
                           'returned by calling G_OBJECT_TYPE() on I<object>; if that class has not',
                           'been registered via gperl_register_object(), this function will emit a',
                           'warning to that effect (with warn()), and attempt to bless it into the',
                           'first known class in the object\'s ancestry.  Since Glib::Object is',
                           'already registered, you\'ll get a Glib::Object if you are lazy, and thus',
                           'this function can fail only if I<object> isn\'t descended from GObject,',
                           'in which case it croaks.  (In reality, if you pass a non-GObject to this',
                           'function, you\'ll be lucky if you don\'t get a segfault, as there\'s not',
                           'really a way to trap that.)  In practice these warnings can be unavoidable,',
                           'so you can use gperl_object_set_no_warn_unreg_subclass() to quell them',
                           'on a class-by-class basis.',
                           '',
                           'However, when perl code is calling a GObject constructor (any function',
                           'which returns a new GObject), call gperl_new_object() with I<own> set to',
                           '%TRUE; this will cause the first matching sink function to be called',
                           'on the GObject to claim ownership of that object, so that it will be',
                           'destroyed when the perl object goes out of scope. The default sink func',
                           'is g_object_unref(); other types should supply the proper function;',
                           'e.g., GtkObject should use gtk_object_sink() here.',
                           '',
                           'Returns the blessed perl object, or #&PL_sv_undef if object was #NULL.',
                           '',
                           '=cut'
                         ],
              'line' => '813'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item GObject * gperl_get_object (SV * sv)',
                           '',
                           'retrieve the GObject pointer from a Perl object.  Returns NULL if I<sv> is not',
                           'linked to a GObject.',
                           '',
                           'Note, this one is not safe -- in general you want to use',
                           'gperl_get_object_check().',
                           '',
                           '=cut'
                         ],
              'line' => '967'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item GObject * gperl_get_object_check (SV * sv, GType gtype);',
                           '',
                           'croaks if I<sv> is undef or is not blessed into the package corresponding',
                           'to I<gtype>.  use this for bringing parameters into xsubs from perl.',
                           'Returns the same as gperl_get_object() (provided it doesn\'t croak first).',
                           '',
                           '=cut'
                         ],
              'line' => '989'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item SV * gperl_object_check_type (SV * sv, GType gtype)',
                           '',
                           'Essentially the same as gperl_get_object_check().',
                           '',
                           'This croaks if the types aren\'t compatible.',
                           '',
                           '=cut'
                         ],
              'line' => '1020'
            },
            {
              'filename' => 'GObject.xs',
              'lines' => [
                           '=item typedef GObject GObject_noinc',
                           '',
                           '=item typedef GObject GObject_ornull',
                           '',
                           '=item newSVGObject(obj)',
                           '',
                           '=item newSVGObject_noinc(obj)',
                           '',
                           '=item SvGObject(sv)',
                           '',
                           '=item SvGObject_ornull(sv)',
                           '',
                           '',
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '1059'
            },
            {
              'filename' => 'GValue.xs',
              'lines' => [
                           '=head2 GValue',
                           '',
                           'GValue is GLib\'s generic value container, and it is because of GValue that the',
                           'run time type handling of GObject parameters and GClosure marshaling can',
                           'function, and most usages of these functions will be from those two points.',
                           '',
                           'Client code will run into uses for gperl_sv_from_value() and',
                           'gperl_value_from_sv() when trying to convert lists of parameters into GValue',
                           'arrays and the like.',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '21'
            },
            {
              'filename' => 'GValue.xs',
              'lines' => [
                           '=item gboolean gperl_value_from_sv (GValue * value, SV * sv)',
                           '',
                           'set a I<value> from a whatever is in I<sv>.  I<value> must be initialized ',
                           'so the code knows what kind of value to coerce out of I<sv>.',
                           '',
                           'Return value is always TRUE; if the code knows how to perform the conversion,',
                           'it croaks.  (The return value is for backward compatibility.) In reality,',
                           'this really ought to always succeed; a failed conversion should be considered',
                           'a bug or unimplemented code!',
                           '',
                           '=cut'
                         ],
              'line' => '47'
            },
            {
              'filename' => 'GValue.xs',
              'lines' => [
                           '=item SV * gperl_sv_from_value (const GValue * value)',
                           '',
                           'Coerce whatever is in I<value> into a perl scalar and return it.',
                           '',
                           'Croaks if the code doesn\'t know how to perform the conversion.',
                           '',
                           'Might end up calling other Perl code.  So if you use this function in XS code',
                           'for a generic GType, make sure the stack pointer is set up correctly before the',
                           'call, and restore it after the call.',
                           '',
                           '=cut'
                         ],
              'line' => '315'
            },
            {
              'filename' => 'GValue.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '332'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=head2 GClosure / GPerlClosure',
                           '',
                           'GPerlClosure is a wrapper around the gobject library\'s GClosure with',
                           'special handling for marshalling perl subroutines as callbacks.',
                           'This is specially tuned for use with GSignal and stuff like io watch,',
                           'timeout, and idle handlers.',
                           '',
                           'For generic callback functions, which need parameters but do not get',
                           'registered with the type system, this is sometimes overkill.  See',
                           'GPerlCallback, below.',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '21'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item GClosure * gperl_closure_new (SV * callback, SV * data, gboolean swap)',
                           '',
                           'Create and return a new GPerlClosure.  I<callback> and I<data> will be copied',
                           'for storage; I<callback> must not be NULL.  If I<swap> is TRUE, I<data> will be',
                           'swapped with the instance during invocation (this is used to implement',
                           'g_signal_connect_swapped()).',
                           '',
                           'If compiled under a thread-enabled perl, the closure will be created and',
                           'marshaled in such a way as to ensure that the same interpreter which created',
                           'the closure will be used to invoke it.',
                           '',
                           '=cut'
                         ],
              'line' => '212'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item GClosure * gperl_closure_new_with_marshaller (SV * callback, SV * data, gboolean swap, GClosureMarshal marshaller)',
                           '',
                           'Like C<gperl_closure_new>, but uses a caller-supplied marshaller.  This is',
                           'provided for use in those sticky circumstances when you just can\'t do it ',
                           'any other way; in general, you want to use the default marshaller, which you',
                           'get if you provide NULL for I<marshaller>.',
                           '',
                           'If you use you own marshaller, you need to take care of everything yourself,',
                           'including swapping the instance and data if C<GPERL_CLOSURE_SWAP_DATA',
                           '(closure)> is true, calling C<gperl_run_exception_handlers> if ERRSV is true',
                           'after invoking the perl sub, and ensuring that you properly use the',
                           'C<marshal_data> parameter as the perl interpreter when PERL_IMPLICIT_CONTEXT is',
                           'defined.  See the implementation of the default marshaller,',
                           'C<gperl_closure_marshal>, in Glib/GClosure.xs for inspiration.',
                           '',
                           '=cut'
                         ],
              'line' => '232'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 GPerlCallback',
                           '',
                           'generic callback functions usually get invoked directly, and are not passed',
                           'parameter lists as GValues.  we could very easily wrap up such generic',
                           'callbacks with something that converts the parameters to GValues and then',
                           'channels everything through GClosure, but this has two problems:  1) the above',
                           'implementation of GClosure is tuned to marshalling signal handlers, which',
                           'always have an instance object, and 2) it\'s more work than is strictly',
                           'necessary.',
                           '',
                           'additionally, generic callbacks aren\'t always kind to the GClosure paradigm.',
                           '',
                           'so, here\'s GPerlCallback, which is designed specifically to run generic',
                           'callback functions.  it reads parameters off the C stack and converts them into',
                           'parameters on the perl stack.  (it uses the GValue to/from SV mechanism to do',
                           'so, but doesn\'t allocate any temps on the heap.)  the callback object itself',
                           'stores the parameter type list.',
                           '',
                           'unfortunately, since the data element is always last, but the number of',
                           'arguments is not known until we have the callback object, we can\'t pass',
                           'gperl_callback_invoke directly to functions requiring a callback; you\'ll have',
                           'to write a proxy callback which calls gperl_callback_invoke.',
                           '',
                           '=over',
                           '',
                           '=item GPerlCallback * gperl_callback_new (SV * func, SV * data, gint n_params, GType param_types[], GType return_type)',
                           '',
                           'Create and return a new GPerlCallback; use gperl_callback_destroy when you are',
                           'finished with it.',
                           '',
                           'I<func>: perl subroutine to call.  this SV will be copied, so don\'t worry about',
                           'reference counts.  must B<not> be #NULL.',
                           '',
                           'I<data>: scalar to pass to I<func> in addition to all other arguments.  the SV',
                           'will be copied, so don\'t worry about reference counts.  may be #NULL.',
                           '',
                           'I<n_params>: the number of elements in I<param_types>.',
                           '',
                           'I<param_types>: the #GType of each argument that should be passed from the',
                           'invocation to I<func>.  may be #NULL if I<n_params> is zero, otherwise it must',
                           'be I<n_params> elements long or nasty things will happen.  this array will be',
                           'copied; see gperl_callback_invoke() for how it is used.',
                           '',
                           'I<return_type>: the #GType of the return value, or 0 if the function has void',
                           'return.',
                           '',
                           '=cut'
                         ],
              'line' => '292'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item void gperl_callback_destroy (GPerlCallback * callback)',
                           '',
                           'Dispose of I<callback>.',
                           '',
                           '=cut'
                         ],
              'line' => '378'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item void gperl_callback_invoke (GPerlCallback * callback, GValue * return_value, ...)',
                           '',
                           'Marshall the variadic parameters according to I<callback>\'s param_types, and',
                           'then invoke I<callback>\'s subroutine in scalar context, or void context if the',
                           'return type is G_TYPE_VOID.  If I<return_value> is not NULL, then value',
                           'returned (if any) will be copied into I<return_value>.',
                           '',
                           'A typical callback handler would look like this:',
                           '',
                           '  static gint',
                           '  real_c_callback (Foo * f, Bar * b, int a, gpointer data)',
                           '  {',
                           '          GPerlCallback * callback = (GPerlCallback*)data;',
                           '          GValue return_value = {0,};',
                           '          gint retval;',
                           '          g_value_init (&return_value, callback->return_type);',
                           '          gperl_callback_invoke (callback, &return_value,',
                           '                                 f, b, a);',
                           '          retval = g_value_get_int (&return_value);',
                           '          g_value_unset (&return_value);',
                           '          return retval;',
                           '  }',
                           '',
                           '',
                           '',
                           '=cut'
                         ],
              'line' => '408'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=back',
                           '',
                           '=head2 Exception Handling',
                           '',
                           'Like Event, Tk, and most other callback-using, event-based perl modules,',
                           'Glib traps exceptions that happen in callbacks.  To enable your code to',
                           'do something about these exceptions, Glib stores a list of exception',
                           'handlers which will be called on the trapped exceptions.  This is',
                           'completely distinct from the $SIG{__DIE__} mechanism provided by Perl',
                           'itself, for various reasons (not the least of which is that the Perl',
                           'docs and source code say that $SIG{__DIE__} is intended for running as',
                           'the program is about to exit, and other behaviors may be removed in the',
                           'future (apparently a source of much debate on p5p)).',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '570'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item int gperl_install_exception_handler (GClosure * closure)',
                           '',
                           'Install a GClosure to be executed when gperl_closure_invoke() traps an',
                           'exception.  The closure should return boolean (TRUE if the handler should',
                           'remain installed) and expect to receive a perl scalar.  This scalar will be',
                           'a private copy of ERRSV ($@) which the handler can mangle to its heart\'s',
                           'content.',
                           '',
                           'The return value is an integer id tag that may be passed to',
                           'gperl_removed_exception_handler().',
                           '',
                           '=cut'
                         ],
              'line' => '603'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item void gperl_remove_exception_handler (guint tag)',
                           '',
                           'Remove the exception handler identified by I<tag>, as returned by',
                           'gperl_install_exception_handler().  If I<tag> cannot be found, this',
                           'does nothing.',
                           '',
                           'WARNING:  this function locks a global data structure, so do NOT call',
                           'it recursively.  also, calling this from within an exception handler will',
                           'result in a deadlock situation.  if you want to remove your handler just',
                           'have it return FALSE.',
                           '',
                           '=cut'
                         ],
              'line' => '660'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=item void gperl_run_exception_handlers (void)',
                           '',
                           'Invoke whatever exception handlers are installed.  You will need this if',
                           'you have written a custom marshaler.  Uses the value of the global ERRSV.',
                           '',
                           '=cut'
                         ],
              'line' => '709'
            },
            {
              'filename' => 'GClosure.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '776'
            },
            {
              'filename' => 'GSignal.xs',
              'lines' => [
                           '=head2 GSignal',
                           '',
                           '=over',
                           '',
                           '=cut'
                         ],
              'line' => '21'
            },
            {
              'filename' => 'GSignal.xs',
              'lines' => [
                           '=item void gperl_signal_set_marshaller_for (GType instance_type, char * detailed_signal, GClosureMarshal marshaller)',
                           '',
                           'You need this function only in rare cases, usually as workarounds for bad',
                           'signal parameter types or to implement writable arguments.  Use the given',
                           'I<marshaller> to marshal all handlers for I<detailed_signal> on',
                           'I<instance_type>.  C<gperl_signal_connect> will look for marshallers',
                           'registered here, and apply them to the GPerlClosure it creates for the given',
                           'callback being connected.',
                           '',
                           'A canonical form of I<detailed_signal> will be used so that I<marshaller> is',
                           'applied for all possible spellings of the signal name.',
                           '',
                           'Use the helper macros in gperl_marshal.h to help write your marshaller',
                           'function.  That header, which is installed with the Glib module but not',
                           '#included through gperl.h, includes commentary and examples which you',
                           'should follow closely to avoid nasty bugs.  Use the Source, Luke.',
                           '',
                           'WARNING: Bend over backwards and turn your head around 720 degrees before',
                           'attempting to write a GPerlClosure marshaller without using the macros in',
                           'gperl_marshal.h.  If you absolutely cannot use those macros, be certain to',
                           'understand what those macros do so you can get the semantics correct, and',
                           'keep your code synchronized with them, or you may miss very important',
                           'bugfixes.',
                           '',
                           '=cut'
                         ],
              'line' => '201'
            },
            {
              'filename' => 'GSignal.xs',
              'lines' => [
                           '=item gulong gperl_signal_connect (SV * instance, char * detailed_signal, SV * callback, SV * data, GConnectFlags flags)',
                           '',
                           'The actual workhorse behind GObject::signal_connect, the binding for',
                           'g_signal_connect, for use from within XS.  This creates a C<GPerlClosure>',
                           'wrapper for the given I<callback> and I<data>, and connects that closure to the',
                           'signal named I<detailed_signal> on the given GObject I<instance>.  This is only',
                           'good for named signals.  I<flags> is the same as for g_signal_connect().',
                           'I<data> may be NULL, but I<callback> must not be.',
                           '',
                           'Returns the id of the installed callback.',
                           '',
                           '=cut'
                         ],
              'line' => '346'
            },
            {
              'filename' => 'GSignal.xs',
              'lines' => [
                           '=back',
                           '',
                           '=cut'
                         ],
              'line' => '543'
            }
          ];
$data = {
          'Glib::Utils' => {
                             'xsubs' => [
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Get the current user\'s name by whatever system-dependent means necessary.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '115'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_get_user_name',
                                            'symname' => 'Glib::get_user_name',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {
                                                         'Glib::get_tmp_dir' => '3',
                                                         'Glib::get_real_name' => '1',
                                                         'Glib::get_home_dir' => '2'
                                                       },
                                            'line' => '119',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_real_name __function__',
                                                                    'Get the current user\'s real name.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '101'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_user_name',
                                            'module' => 'Glib::Utils',
                                            'line' => '119',
                                            'symname' => 'Glib::get_real_name',
                                            'package' => 'Glib',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_home_dir __function__',
                                                                    'Find the current user\'s home directory, by system-dependent/appropriate',
                                                                    'means.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '105'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_user_name',
                                            'module' => 'Glib::Utils',
                                            'line' => '119',
                                            'symname' => 'Glib::get_home_dir',
                                            'package' => 'Glib',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_tmp_dir __function__',
                                                                    'Get the temp dir as appropriate for the current system.  See the GLib docs',
                                                                    'for info on how it works.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '110'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_user_name',
                                            'module' => 'Glib::Utils',
                                            'line' => '119',
                                            'symname' => 'Glib::get_tmp_dir',
                                            'package' => 'Glib',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Get the base directory for application data such as icons that is customized',
                                                                    'for a particular user.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '149'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_get_user_data_dir',
                                            'symname' => 'Glib::get_user_data_dir',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' GLIB_CHECK_VERSION (2, 6, 0)'
                                                                           ],
                                            'hidden' => '',
                                            'alias' => {
                                                         'Glib::get_user_config_dir' => '1',
                                                         'Glib::get_user_cache_dir' => '2'
                                                       },
                                            'line' => '154',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_user_config_dir __function__',
                                                                    'Gets the base directory in which to store user-specific application',
                                                                    'configuration information such as user preferences and settings.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '139'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_user_data_dir',
                                            'module' => 'Glib::Utils',
                                            'line' => '154',
                                            'symname' => 'Glib::get_user_config_dir',
                                            'package' => 'Glib',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_user_cache_dir __function__',
                                                                    'Gets the base directory in which to store non-essential, cached data specific',
                                                                    'to particular user.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '144'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_user_data_dir',
                                            'module' => 'Glib::Utils',
                                            'line' => '154',
                                            'symname' => 'Glib::get_user_cache_dir',
                                            'package' => 'Glib',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Returns an ordered list of base directories in which to access system-wide',
                                                                    'application data.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '181'
                                                     },
                                            'gerror' => '',
                                            'function' => 1,
                                            'original_name' => 'g_get_system_data_dirs',
                                            'symname' => 'Glib::get_system_data_dirs',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'codetype' => 'PPCODE',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' GLIB_CHECK_VERSION (2, 6, 0)'
                                                                           ],
                                            'hidden' => '',
                                            'alias' => {
                                                         'Glib::get_language_names' => '2',
                                                         'Glib::get_system_config_dirs' => '1'
                                                       },
                                            'line' => '186',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_system_config_dirs __function__',
                                                                    'Returns an ordered list of base directories in which to access system-wide',
                                                                    'configuration information.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '170'
                                                     },
                                            'gerror' => '',
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_system_data_dirs',
                                            'package' => 'Glib',
                                            'symname' => 'Glib::get_system_config_dirs',
                                            'deprecated' => '',
                                            'codetype' => 'PPCODE',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {},
                                            'module' => 'Glib::Utils',
                                            'line' => '186'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::get_language_names __function__',
                                                                    'Computes a list of applicable locale names, which can be used to e.g. construct',
                                                                    'locale-dependent filenames or search paths. The returned list is sorted from',
                                                                    'most desirable to least desirable and always contains the default locale "C".',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '175'
                                                     },
                                            'gerror' => '',
                                            'function' => 1,
                                            'args' => undef,
                                            'original_name' => 'g_get_system_data_dirs',
                                            'package' => 'Glib',
                                            'symname' => 'Glib::get_language_names',
                                            'deprecated' => '',
                                            'codetype' => 'PPCODE',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {},
                                            'module' => 'Glib::Utils',
                                            'line' => '186'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Returns the full path of a special directory using its logical id.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '210'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_get_user_special_dir',
                                            'args' => [
                                                        {
                                                          'name' => 'directory',
                                                          'type' => 'GUserDirectory'
                                                        }
                                                      ],
                                            'symname' => 'Glib::get_user_special_dir',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' GLIB_CHECK_VERSION (2, 14, 0)'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '214',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Get the human-readable application name set by C<set_application_name>.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '231'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_get_application_name',
                                            'symname' => 'Glib::get_application_name',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' GLIB_CHECK_VERSION(2, 2, 0)'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '235',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Set the human-readable application name.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '236'
                                                     },
                                            'gerror' => '',
                                            'function' => 1,
                                            'original_name' => 'g_set_application_name',
                                            'args' => [
                                                        {
                                                          'name' => 'application_name',
                                                          'type' => 'const gchar *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::set_application_name',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' GLIB_CHECK_VERSION(2, 2, 0)'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '240',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Return a string describing the given errno value, like "No such file',
                                                                    'or directory" for ENOENT.  This is translated into the user\'s',
                                                                    'preferred language and is a utf8 wide-char string (unlike a $!',
                                                                    'string (L<perlvar>) or POSIX::strerror (L<POSIX>) which are locale',
                                                                    'codeset bytes).',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '257'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_strerror',
                                            'args' => [
                                                        {
                                                          'name' => 'err',
                                                          'type' => 'gint'
                                                        }
                                                      ],
                                            'symname' => 'Glib::strerror',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '266',
                                            'module' => 'Glib::Utils'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GUtils.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    'Return a string describing the given signal number, like "Segmentation',
                                                                    'violation" for SIGSEGV.  This is translated into the user\'s preferred',
                                                                    'language and is a utf8 wide-char string.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '267'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'const gchar *'
                                                             ],
                                            'function' => 1,
                                            'original_name' => 'g_strsignal',
                                            'args' => [
                                                        {
                                                          'name' => 'signum',
                                                          'type' => 'gint'
                                                        }
                                                      ],
                                            'symname' => 'Glib::strsignal',
                                            'package' => 'Glib',
                                            'deprecated' => '',
                                            'filename' => 'GUtils.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '274',
                                            'module' => 'Glib::Utils'
                                          }
                                        ],
                             'pods' => [
                                         {
                                           'filename' => 'GUtils.xs',
                                           'lines' => [
                                                        '=for object Glib::Utils Miscellaneous utility functions',
                                                        '=cut'
                                                      ],
                                           'line' => '68'
                                         },
                                         {
                                           'filename' => 'GUtils.xs',
                                           'position' => 'SYNOPSIS',
                                           'lines' => [
                                                        '=for position SYNOPSIS',
                                                        '',
                                                        '=head1 SYNOPSIS',
                                                        '',
                                                        '  use Glib;',
                                                        '  Glib::set_application_name (Glib::get_real_name."\'s Cool Program");',
                                                        '',
                                                        '  print "app name is ".Glib::get_application_name()."\\n";',
                                                        '',
                                                        '=for position DESCRIPTION',
                                                        '',
                                                        '=head1 DESCRIPTION',
                                                        '',
                                                        'Here are some useful miscellaneous utilities.',
                                                        'GLib is a portability library, providing portable utility functions for',
                                                        'C programs.  As such, most of these functions seem to violate the Glib',
                                                        'binding principle of not duplicating functionality that Perl already',
                                                        'provides, but there\'s a distinction for each one, i swear.  The functions',
                                                        'for dealing with user information are provided on all GLib-supported',
                                                        'platforms, not just where POSIX (which provides similar information) is',
                                                        'available, and even work on platforms where %ENV may not include the',
                                                        'expected information.  Also, the "application name" referred to by',
                                                        '(set|get)_application_name is a human readable name, distinct from the',
                                                        'actual program name provided by Perl\'s own $0.',
                                                        '',
                                                        '=cut'
                                                      ],
                                           'line' => '71'
                                         }
                                       ],
                             'blurb' => ' Miscellaneous utility functions'
                           },
          'Glib::OptionGroup' => {
                                   'xsubs' => [
                                                {
                                                  'pod' => {
                                                             'filename' => 'GOption.xs',
                                                             'lines' => [
                                                                          '=for apidoc',
                                                                          '=for signature optiongroup = Glib::OptionGroup->new (key => value, ...)',
                                                                          '=for arg ... (__hide__)',
                                                                          '',
                                                                          'Creates a new option group from the given key-value pairs.  The valid keys are',
                                                                          'name, description, help_description, and entries.  The first three specify',
                                                                          'strings while the last one, entries, specifies an array reference of option',
                                                                          'entries.  Example:',
                                                                          '',
                                                                          '  my $group = Glib::OptionGroup->new (',
                                                                          '                name => \'urgs\',',
                                                                          '                description => \'Urgs Urgs Urgs\',',
                                                                          '                help_description => \'Help with Urgs\',',
                                                                          '                entries => \\@entries);',
                                                                          '',
                                                                          'An option entry is a hash reference like this:',
                                                                          '',
                                                                          '  { long_name => \'verbose\',',
                                                                          '    short_name => \'v\',',
                                                                          '    flags => [qw/reverse hidden in-main/],',
                                                                          '    arg_type => \'none\',',
                                                                          '    arg_value => \\$verbose,',
                                                                          '    description => \'verbose desc.\',',
                                                                          '    arg_description => \'verbose arg desc.\' }',
                                                                          '',
                                                                          'Of those keys only long_name, arg_type, and arg_value are required.  So this is',
                                                                          'a valid option entry too:',
                                                                          '',
                                                                          '  { long_name => \'package-names\',',
                                                                          '    arg_type => \'string-array\',',
                                                                          '    arg_value => \\$package_names }',
                                                                          '',
                                                                          'For convenience, option entries can also be specified as array references',
                                                                          'containing long_name, short_name, arg_type, and arg_value:',
                                                                          '',
                                                                          '  [ \'filenames\', \'f\', \'filename-array\', \\$filenames ]',
                                                                          '',
                                                                          'If you don\'t want an option to have a short name, specify undef for it:',
                                                                          '',
                                                                          '  [ \'filenames\', undef, \'filename-array\', \\$filenames ]',
                                                                          '',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '795'
                                                           },
                                                  'gerror' => '',
                                                  'return_type' => [
                                                                     'GOptionGroup_own *'
                                                                   ],
                                                  'function' => '',
                                                  'original_name' => 'g_option_group_new',
                                                  'args' => [
                                                              {
                                                                'name' => 'class',
                                                                'type' => undef
                                                              },
                                                              {
                                                                'name' => '...'
                                                              }
                                                            ],
                                                  'symname' => 'Glib::OptionGroup::new',
                                                  'package' => 'Glib::OptionGroup',
                                                  'deprecated' => '',
                                                  'codetype' => 'CODE',
                                                  'filename' => 'GOption.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'hidden' => '',
                                                  'line' => '838',
                                                  'module' => 'Glib::Option'
                                                },
                                                {
                                                  'pod' => {
                                                             'lines' => []
                                                           },
                                                  'original_name' => 'g_option_group_set_translate_func',
                                                  'args' => [
                                                              {
                                                                'name' => 'group',
                                                                'type' => 'GOptionGroup *'
                                                              },
                                                              {
                                                                'name' => 'func',
                                                                'type' => 'SV *'
                                                              },
                                                              {
                                                                'name' => 'data',
                                                                'default' => 'NULL',
                                                                'type' => 'SV *'
                                                              }
                                                            ],
                                                  'symname' => 'Glib::OptionGroup::set_translate_func',
                                                  'package' => 'Glib::OptionGroup',
                                                  'codetype' => 'CODE',
                                                  'filename' => 'GOption.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'line' => '886',
                                                  'module' => 'Glib::Option'
                                                },
                                                {
                                                  'pod' => {
                                                             'lines' => []
                                                           },
                                                  'original_name' => 'g_option_group_set_translation_domain',
                                                  'args' => [
                                                              {
                                                                'name' => 'group',
                                                                'type' => 'GOptionGroup *'
                                                              },
                                                              {
                                                                'name' => 'domain',
                                                                'type' => 'const gchar *'
                                                              }
                                                            ],
                                                  'symname' => 'Glib::OptionGroup::set_translation_domain',
                                                  'package' => 'Glib::OptionGroup',
                                                  'filename' => 'GOption.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'line' => '900',
                                                  'module' => 'Glib::Option'
                                                }
                                              ],
                                   'pods' => [],
                                   'enums' => [
                                                {
                                                  'pod' => {
                                                             'filename' => 'GOption.xs',
                                                             'lines' => [
                                                                          '=for enum Glib::OptionFlags',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '785'
                                                           },
                                                  'name' => 'Glib::OptionFlags',
                                                  'type' => 'enum'
                                                },
                                                {
                                                  'pod' => {
                                                             'filename' => 'GOption.xs',
                                                             'lines' => [
                                                                          '=for enum Glib::OptionArg',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '788'
                                                           },
                                                  'name' => 'Glib::OptionArg',
                                                  'type' => 'enum'
                                                }
                                              ]
                                 },
          'Glib::Object' => {
                              'blurb' => ' Bindings for GObject',
                              'xsubs' => [
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc __hide__',
                                                                     '',
                                                                     'Users shouldn\'t know this exists.',
                                                                     '',
                                                                     'This is part of the machinery to support object tracking in a threaded',
                                                                     'environment.  When perl spawns a new interpreter thread, it invokes',
                                                                     'CLONE on all packages -- NOT on objects.  This is our only hook into',
                                                                     'that process.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1134'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'CLONE',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => 'gchar *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::CLONE',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [
                                                                              ' GPERL_THREAD_SAFE'
                                                                            ],
                                             'hidden' => 1,
                                             'line' => '1145',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc set_threadsafe',
                                                                     'Enables/disables threadsafe gobject tracking. Returns whether or not tracking',
                                                                     'will be successful and thus whether using perl ithreads will be possible.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1160'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'gboolean'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'set_threadsafe',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => undef
                                                         },
                                                         {
                                                           'name' => 'threadsafe',
                                                           'type' => 'gboolean'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::set_threadsafe',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1165',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'original_name' => 'DESTROY',
                                             'args' => [
                                                         {
                                                           'name' => 'sv',
                                                           'type' => 'SV *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::DESTROY',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '1217',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     '=for signature object = $class->new (...)',
                                                                     '',
                                                                     '=for arg ... key/value pairs, property values to set on creation',
                                                                     '',
                                                                     'Instantiate a Glib::Object of type I<$class>.  Any key/value pairs in',
                                                                     'I<...> are used to set properties on the new object; see C<set>.',
                                                                     'This is designed to be inherited by Perl-derived subclasses (see',
                                                                     'L<Glib::Object::Subclass>), but you can actually use it to create',
                                                                     'any GObject-derived type.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1290'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'SV *'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'g_object_new',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => 'const char *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::new',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1304',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::get',
                                                                     '=for arg ... (list) list of property names',
                                                                     '',
                                                                     'Alias for C<get_property> (see L</get and set> above).',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1380'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'original_name' => 'g_object_get',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::get',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {
                                                          'Glib::Object::get' => '0',
                                                          'Glib::Object::get_property' => '1'
                                                        },
                                             'module' => 'Glib::Object',
                                             'line' => '1395'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::get_property',
                                                                     '=for arg ... (__hide__)',
                                                                     '',
                                                                     'Fetch and return the values for the object properties named in I<...>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1387'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'original_name' => 'g_object_get',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::get_property',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {},
                                             'module' => 'Glib::Object',
                                             'line' => '1395'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::set',
                                                                     '=for signature $object->set (key => $value, ...)',
                                                                     '=for arg ... key/value pairs',
                                                                     '',
                                                                     'Alias for C<set_property> (see L</get and set> above).',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1420'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'original_name' => 'g_object_set',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::set',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {
                                                          'Glib::Object::set_property' => '1',
                                                          'Glib::Object::set' => '0'
                                                        },
                                             'module' => 'Glib::Object',
                                             'line' => '1437'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::set_property',
                                                                     '=for signature $object->set_property (key => $value, ...)',
                                                                     '=for arg ... (__hide__)',
                                                                     '',
                                                                     'Set object properties.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1428'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'original_name' => 'g_object_set',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::set_property',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {},
                                             'module' => 'Glib::Object',
                                             'line' => '1437'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Emits a "notify" signal for the property I<$property> on I<$object>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1461'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_object_notify',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'property_name',
                                                           'type' => 'const gchar *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::notify',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1467',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Stops emission of "notify" signals on I<$object>. The signals are queued',
                                                                     'until C<thaw_notify> is called on I<$object>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1468'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_object_freeze_notify',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::freeze_notify',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1475',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Reverts the effect of a previous call to C<freeze_notify>. This causes all',
                                                                     'queued "notify" signals on I<$object> to be emitted.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1476'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_object_thaw_notify',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::thaw_notify',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1483',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::find_property',
                                                                     '=for signature pspec or undef = $object_or_class_name->find_property ($name)',
                                                                     '=for arg name (string)',
                                                                     '=for arg ... (__hide__)',
                                                                     'Find the definition of object property I<$name> for I<$object_or_class_name>.',
                                                                     'Return C<undef> if no such property.  For',
                                                                     'the returned data see L<Glib::Object::list_properties>.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1517'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_object_find_property',
                                             'args' => [
                                                         {
                                                           'name' => 'object_or_class_name',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::find_property',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'PPCODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {
                                                          'Glib::Object::list_properties' => '1'
                                                        },
                                             'line' => '1526',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::list_properties',
                                                                     '=for signature list = $object_or_class_name->list_properties',
                                                                     '=for arg ... (__hide__)',
                                                                     'List all the object properties for I<$object_or_class_name>; returns them as',
                                                                     'a list of hashes, containing these keys:',
                                                                     '',
                                                                     '=over',
                                                                     '',
                                                                     '=item name',
                                                                     '',
                                                                     'The name of the property',
                                                                     '',
                                                                     '=item type',
                                                                     '',
                                                                     'The type of the property',
                                                                     '',
                                                                     '=item owner_type',
                                                                     '',
                                                                     'The type that owns the property',
                                                                     '',
                                                                     '=item descr',
                                                                     '',
                                                                     'The description of the property',
                                                                     '',
                                                                     '=item flags',
                                                                     '',
                                                                     'The Glib::ParamFlags of the property',
                                                                     '',
                                                                     '=back',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1485'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'object_or_class_name',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'original_name' => 'g_object_find_property',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::list_properties',
                                             'deprecated' => '',
                                             'codetype' => 'PPCODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {},
                                             'module' => 'Glib::Object',
                                             'line' => '1526'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'GObject provides an arbitrary data mechanism that assigns unsigned integers',
                                                                     'to key names.  Functionality overlaps with the hash used as the Perl object',
                                                                     'instance, so we strongly recommend you use hash keys for your data storage.',
                                                                     'The GObject data values cannot store type information, so they are not safe',
                                                                     'to use for anything but integer values, and you really should use this method',
                                                                     'only if you know what you are doing.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1638'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_object_set_data',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'key',
                                                           'type' => 'gchar *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::set_data',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1649',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Fetch the integer stored under the object data key I<$key>.  These values do not',
                                                                     'have types; type conversions must be done manually.  See C<set_data>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1660'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'UV'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'g_object_get_data',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'key',
                                                           'type' => 'gchar *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::get_data',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1667',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::new_from_pointer',
                                                                     '',
                                                                     '=for arg pointer (unsigned) a C pointer value as an integer.',
                                                                     '',
                                                                     '=for arg noinc (boolean) if true, do not increase the GObject\'s reference count when creating the Perl wrapper.  this typically means that when the Perl wrapper will own the object.  in general you don\'t want to do that, so the default is false.',
                                                                     '',
                                                                     'Create a Perl Glib::Object reference for the C object pointed to by I<$pointer>.',
                                                                     'You should need this I<very> rarely; it\'s intended to support foreign objects.',
                                                                     '',
                                                                     'NOTE: the cast from arbitrary integer to GObject may result in a core dump without',
                                                                     'warning, because the type-checking macro G_OBJECT() attempts to dereference the',
                                                                     'pointer to find a GTypeClass structure, and there is no portable way to validate',
                                                                     'the pointer.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1680'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'SV *'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'new_from_pointer',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => undef
                                                         },
                                                         {
                                                           'name' => 'pointer',
                                                           'type' => 'gpointer'
                                                         },
                                                         {
                                                           'name' => 'noinc',
                                                           'default' => 'FALSE',
                                                           'type' => 'gboolean'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::new_from_pointer',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1696',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Complement of C<new_from_pointer>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1705'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'gpointer'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'get_pointer',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::get_pointer',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1711',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GObject.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '=for arg all if FALSE (or omitted) tie only properties for this object\'s class, if TRUE tie the properties of this and all parent classes.',
                                                                     '',
                                                                     'A special method available to Glib::Object derivatives, it uses perl\'s tie',
                                                                     'facilities to associate hash keys with the properties of the object. For',
                                                                     'example:',
                                                                     '',
                                                                     '  $button->tie_properties;',
                                                                     '  # equivilent to $button->set (label => \'Hello World\');',
                                                                     '  $button->{label} = \'Hello World\';',
                                                                     '  print "the label is: ".$button->{label}."\\n";',
                                                                     '',
                                                                     'Attempts to write to read-only properties will croak, reading a write-only',
                                                                     'property will return \'[write-only]\'.',
                                                                     '',
                                                                     'Care must be taken when using tie_properties with objects of types created with',
                                                                     'Glib::Object::Subclass as there may be clashes with existing hash keys that',
                                                                     'could cause infinite loops. The solution is to use custom property get/set',
                                                                     'functions to alter the storage locations of the properties.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1719'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'tie_properties',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'all',
                                                           'default' => 'FALSE',
                                                           'type' => 'gboolean'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::tie_properties',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'filename' => 'GObject.xs',
                                             'preprocessor_conditionals' => [
                                                                              ' 0'
                                                                            ],
                                             'hidden' => '',
                                             'line' => '1740',
                                             'module' => 'Glib::Object'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     '=for signature retval = $object->signal_emit ($name, ...)',
                                                                     '',
                                                                     '=for arg name (string) the name of the signal',
                                                                     '',
                                                                     '=for arg ... (list) any arguments to pass to handlers.',
                                                                     '',
                                                                     'Emit the signal I<name> on I<$object>.  The number and types of additional',
                                                                     'arguments in I<...> are determined by the signal; similarly, the presence',
                                                                     'and type of return value depends on the signal being emitted.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '628'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_signal_emit',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'name',
                                                           'type' => 'char *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_emit',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'PPCODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '642',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     'Look up information about the signal I<$name> on the instance type',
                                                                     'I<$object_or_class_name>, which may be either a Glib::Object or a package',
                                                                     'name.',
                                                                     '',
                                                                     'See also C<Glib::Type::list_signals>, which returns the same kind of',
                                                                     'hash refs as this does.',
                                                                     '',
                                                                     'Since 1.080.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '707'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'SV *'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'g_signal_query',
                                             'args' => [
                                                         {
                                                           'name' => 'object_or_class_name',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'name',
                                                           'type' => 'const char *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_query',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '718',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '=for signature $ihint = $instance->signal_get_invocation_hint',
                                                                     'Get a reference to a hash describing the innermost signal currently active',
                                                                     'on C<$instance>.  Returns undef if no signal emission is active.  This',
                                                                     'invocation hint is the same object passed to signal emission hooks, and',
                                                                     'contains these keys:',
                                                                     '',
                                                                     '=over',
                                                                     '',
                                                                     '=item signal_name',
                                                                     '',
                                                                     'The name of the signal being emitted.',
                                                                     '',
                                                                     '=item detail',
                                                                     '',
                                                                     'The detail passed on for this emission.  For example, a C<notify> signal will',
                                                                     'have the property name as the detail.',
                                                                     '',
                                                                     '=item run_type',
                                                                     '',
                                                                     'The current stage of signal emission, one of "run-first", "run-last", or',
                                                                     '"run-cleanup".',
                                                                     '',
                                                                     '=back',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '754'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'SV *'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'g_signal_get_invocation_hint',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_get_invocation_hint',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '781',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'original_name' => 'g_signal_stop_emission_by_name',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'detailed_signal',
                                                           'type' => 'const gchar *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_stop_emission_by_name',
                                             'package' => 'Glib::Object',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '798',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '=for arg detailed_signal (string) of the form "signal-name::detail"',
                                                                     '=for arg hook_func (subroutine)',
                                                                     'Add an emission hook for a signal.  The hook will be called for any emission',
                                                                     'of that signal, independent of the instance.  This is possible only for',
                                                                     'signals which don\'t have the C<G_SIGNAL_NO_HOOKS> flag set.',
                                                                     '',
                                                                     'The I<$hook_func> should be reference to a subroutine that looks something',
                                                                     'like this:',
                                                                     '',
                                                                     '  sub emission_hook {',
                                                                     '      my ($invocation_hint, $parameters, $hook_data) = @_;',
                                                                     '      # $parameters is a reference to the @_ to be passed to',
                                                                     '      # signal handlers, including the instance as $parameters->[0].',
                                                                     '      return $stay_connected;  # boolean',
                                                                     '  }',
                                                                     '',
                                                                     'This function returns an id that can be used with C<remove_emission_hook>.',
                                                                     '',
                                                                     'Since 1.100.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '804'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'gulong'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'g_signal_add_emission_hook',
                                             'args' => [
                                                         {
                                                           'name' => 'object_or_class_name',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'detailed_signal',
                                                           'type' => 'const char *'
                                                         },
                                                         {
                                                           'name' => 'hook_func',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'hook_data',
                                                           'default' => 'NULL',
                                                           'type' => 'SV *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_add_emission_hook',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '826',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     'Remove a hook that was installed by C<add_emission_hook>.',
                                                                     '',
                                                                     'Since 1.100.',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '856'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_signal_remove_emission_hook',
                                             'args' => [
                                                         {
                                                           'name' => 'object_or_class_name',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'signal_name',
                                                           'type' => 'const char *'
                                                         },
                                                         {
                                                           'name' => 'hook_id',
                                                           'type' => 'gulong'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_remove_emission_hook',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '862',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::signal_connect',
                                                                     '',
                                                                     '=for arg callback (subroutine) ',
                                                                     '',
                                                                     '=for arg data (scalar) arbitrary data to be passed to each invocation of I<callback>',
                                                                     '',
                                                                     'Register I<callback> to be called on each emission of I<$detailed_signal>.',
                                                                     'Returns an identifier that may be used to remove this handler with',
                                                                     'C<< $object->signal_handler_disconnect >>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '901'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'gulong'
                                                              ],
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'detailed_signal',
                                                           'type' => 'char *'
                                                         },
                                                         {
                                                           'name' => 'callback',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *',
                                                           'default' => 'NULL'
                                                         }
                                                       ],
                                             'original_name' => 'g_signal_connect',
                                             'module' => 'Glib::Signal',
                                             'line' => '928',
                                             'symname' => 'Glib::Object::signal_connect',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {
                                                          'Glib::Object::signal_connect_after' => '1',
                                                          'Glib::Object::signal_connect_swapped' => '2',
                                                          'Glib::Object::signal_connect' => '0'
                                                        }
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::signal_connect_after',
                                                                     '',
                                                                     'Like C<signal_connect>, except that I<$callback> will be run after the default',
                                                                     'handler.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '913'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [],
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'detailed_signal',
                                                           'type' => 'char *'
                                                         },
                                                         {
                                                           'name' => 'callback',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *',
                                                           'default' => 'NULL'
                                                         }
                                                       ],
                                             'original_name' => 'g_signal_connect',
                                             'module' => 'Glib::Signal',
                                             'line' => '928',
                                             'symname' => 'Glib::Object::signal_connect_after',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {}
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::signal_connect_swapped',
                                                                     '',
                                                                     'Like C<signal_connect>, except that I<$data> and I<$object> will be swapped',
                                                                     'on invocation of I<$callback>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '920'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [],
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'detailed_signal',
                                                           'type' => 'char *'
                                                         },
                                                         {
                                                           'name' => 'callback',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *',
                                                           'default' => 'NULL'
                                                         }
                                                       ],
                                             'original_name' => 'g_signal_connect',
                                             'module' => 'Glib::Signal',
                                             'line' => '928',
                                             'symname' => 'Glib::Object::signal_connect_swapped',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {}
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'original_name' => 'g_signal_handler_block',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'handler_id',
                                                           'type' => 'gulong'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_handler_block',
                                             'package' => 'Glib::Object',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '949',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'original_name' => 'g_signal_handler_unblock',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'handler_id',
                                                           'type' => 'gulong'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_handler_unblock',
                                             'package' => 'Glib::Object',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '954',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'original_name' => 'g_signal_handler_disconnect',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'handler_id',
                                                           'type' => 'gulong'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_handler_disconnect',
                                             'package' => 'Glib::Object',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '959',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'lines' => []
                                                      },
                                             'return_type' => [
                                                                'gboolean'
                                                              ],
                                             'original_name' => 'g_signal_handler_is_connected',
                                             'args' => [
                                                         {
                                                           'name' => 'object',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'handler_id',
                                                           'type' => 'gulong'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_handler_is_connected',
                                             'package' => 'Glib::Object',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'line' => '964',
                                             'module' => 'Glib::Signal'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '=for arg func (subroutine) function to block',
                                                                     '=for arg data (scalar) data to match, ignored if undef',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1041'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'int'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'signal_handlers_block_by_func',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'func',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'default' => 'NULL',
                                                           'type' => 'SV *'
                                                         }
                                                       ],
                                             'line' => '1046',
                                             'module' => 'Glib::Signal',
                                             'package' => 'Glib::Object',
                                             'symname' => 'Glib::Object::signal_handlers_block_by_func',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {
                                                          'Glib::Object::signal_handlers_unblock_by_func' => '1',
                                                          'Glib::Object::signal_handlers_disconnect_by_func' => '2'
                                                        }
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::signal_handlers_unblock_by_func',
                                                                     '=for arg func (subroutine) function to block',
                                                                     '=for arg data (scalar) data to match, ignored if undef',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1031'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [],
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'func',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *',
                                                           'default' => 'NULL'
                                                         }
                                                       ],
                                             'original_name' => 'signal_handlers_block_by_func',
                                             'module' => 'Glib::Signal',
                                             'line' => '1046',
                                             'symname' => 'Glib::Object::signal_handlers_unblock_by_func',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {}
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc Glib::Object::signal_handlers_disconnect_by_func',
                                                                     '=for arg func (subroutine) function to block',
                                                                     '=for arg data (scalar) data to match, ignored if undef',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1036'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [],
                                             'function' => '',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => 'func',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'type' => 'SV *',
                                                           'default' => 'NULL'
                                                         }
                                                       ],
                                             'original_name' => 'signal_handlers_block_by_func',
                                             'module' => 'Glib::Signal',
                                             'line' => '1046',
                                             'symname' => 'Glib::Object::signal_handlers_disconnect_by_func',
                                             'package' => 'Glib::Object',
                                             'codetype' => 'CODE',
                                             'deprecated' => '',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'alias' => {}
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Chain up to an overridden class closure; it is only valid to call this from',
                                                                     'a class closure override.',
                                                                     '',
                                                                     'Translation: because of various details in how GObjects are implemented,',
                                                                     'the way to override a virtual method on a GObject is to provide a new "class',
                                                                     'closure", or default handler for a signal.  This happens when a class is',
                                                                     'registered with the type system (see Glib::Type::register and',
                                                                     'L<Glib::Object::Subclass>).  When called from inside such an override, this',
                                                                     'method runs the overridden class closure.  This is equivalent to calling',
                                                                     '$self->SUPER::$method (@_) in normal Perl objects.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '1076'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'g_signal_chain_from_overridden',
                                             'args' => [
                                                         {
                                                           'name' => 'instance',
                                                           'type' => 'GObject *'
                                                         },
                                                         {
                                                           'name' => '...'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Object::signal_chain_from_overridden',
                                             'package' => 'Glib::Object',
                                             'deprecated' => '',
                                             'codetype' => 'PPCODE',
                                             'filename' => 'GSignal.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '1091',
                                             'module' => 'Glib::Signal'
                                           }
                                         ],
                              'pods' => [
                                          {
                                            'filename' => 'GObject.xs',
                                            'lines' => [
                                                         '=for object Glib::Object Bindings for GObject',
                                                         '=cut'
                                                       ],
                                            'line' => '1176'
                                          },
                                          {
                                            'filename' => 'GObject.xs',
                                            'position' => 'DESCRIPTION',
                                            'lines' => [
                                                         '=for position DESCRIPTION',
                                                         '',
                                                         '=head1 DESCRIPTION',
                                                         '',
                                                         'GObject is the base object class provided by the gobject library.  It provides',
                                                         'object properties with a notification system, and emittable signals.',
                                                         '',
                                                         'Glib::Object is the corresponding Perl object class.  Glib::Objects are',
                                                         'represented by blessed hash references, with a magical connection to the',
                                                         'underlying C object.',
                                                         '',
                                                         '=head2 get and set',
                                                         '',
                                                         'Some subclasses of C<Glib::Object> override C<get> and C<set> with methods',
                                                         'more useful to the subclass, for example C<Gtk2::TreeModel> getting and',
                                                         'setting row contents.',
                                                         '',
                                                         'This is usually done when the subclass has no object properties.  Any object',
                                                         'properties it or a further subclass does have can always be accessed with',
                                                         'C<get_property> and C<set_property> (together with C<find_property> and',
                                                         'C<list_properties> to enquire about them).',
                                                         '',
                                                         'Generic code for any object subclass can use the names C<get_property> and',
                                                         'C<set_property> to be sure of getting the object properties as such.',
                                                         '',
                                                         '=cut'
                                                       ],
                                            'line' => '1179'
                                          }
                                        ]
                            },
          'Glib::Param::UInt64' => {
                                     'xsubs' => [
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'guint64'
                                                                     ],
                                                    'original_name' => 'get_minimum',
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::Param::UInt64::get_minimum',
                                                    'package' => 'Glib::Param::UInt64',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '1030',
                                                    'module' => 'Glib::ParamSpec'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'guint64'
                                                                     ],
                                                    'original_name' => 'get_maximum',
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::Param::UInt64::get_maximum',
                                                    'package' => 'Glib::Param::UInt64',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '1037',
                                                    'module' => 'Glib::ParamSpec'
                                                  }
                                                ],
                                     'pods' => [
                                                 {
                                                   'filename' => 'GParamSpec.xs',
                                                   'lines' => [
                                                                '=for object Glib::Param::UInt64',
                                                                '',
                                                                '=head1 DESCRIPTION',
                                                                '',
                                                                'This page documents the extra accessors available for the unsigned 64 bit',
                                                                'integer type paramspecs.  On 32 bit machines and even on some 64 bit machines,',
                                                                'perl really only supports 32 bit integers, so all of these methods convert the',
                                                                'values to and from Perl strings if necessary.',
                                                                '',
                                                                '=cut'
                                                              ],
                                                   'line' => '1018'
                                                 }
                                               ]
                                   },
          'Glib::Type' => {
                            'xsubs' => [
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '=for arg parent_class (package) type from which to derive',
                                                                   '=for arg new_class (package) name of new type',
                                                                   '=for arg ... arguments for creation',
                                                                   'Register a new type with the GLib type system.',
                                                                   '',
                                                                   'This is a traffic-cop function.  If I<$parent_type> derives from Glib::Object,',
                                                                   'this passes the arguments through to C<register_object>.  If I<$parent_type>',
                                                                   'is Glib::Flags or Glib::Enum, this strips I<$parent_type> and passes the',
                                                                   'remaining args on to C<register_enum> or C<register_flags>.  See those',
                                                                   'functions\' documentation for more information.',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '1948'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'g_type_register',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'parent_class',
                                                         'type' => 'const char *'
                                                       },
                                                       {
                                                         'name' => 'new_class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => '...'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::register',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'CODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '1961',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   '=arg parent_package () name of the parent package, which must be a derivative of Glib::Object.',
                                                                   '',
                                                                   '=arg new_package usually __PACKAGE__.',
                                                                   '',
                                                                   '=for arg ... (list) key/value pairs controlling how the class is created.',
                                                                   '',
                                                                   'Register I<new_package> as an officially GLib-sanctioned derivative of',
                                                                   'the (GObject derivative) I<parent_package>.  This automatically sets up',
                                                                   'an @ISA entry for you, and creates a new GObjectClass under the hood.',
                                                                   '',
                                                                   'The I<...> parameters are key/value pairs, currently supporting:',
                                                                   '',
                                                                   '=over',
                                                                   '',
                                                                   '=item signals => HASHREF',
                                                                   '',
                                                                   'The C<signals> key contains a hash, keyed by signal names, which describes',
                                                                   'how to set up the signals for I<new_package>.',
                                                                   '',
                                                                   'If the value is a code reference, the named signal must exist somewhere in',
                                                                   'I<parent_package> or its ancestry; the code reference will be used to ',
                                                                   'override the class closure for that signal.  This is the officially sanctioned',
                                                                   'way to override virtual methods on Glib::Objects.  The value may be a string',
                                                                   'rather than a code reference, in which case the sub with that name in ',
                                                                   'I<new_package> will be used.  (The function should not be inherited.)',
                                                                   '',
                                                                   'If the value is a hash reference, the key will be the name of a new signal',
                                                                   'created with the properties defined in the hash.  All of the properties',
                                                                   'are optional, with defaults provided:',
                                                                   '',
                                                                   '=over',
                                                                   '',
                                                                   '=item class_closure => subroutine or undef',
                                                                   '',
                                                                   'Use this code reference (or sub name) as the class closure (that is, the ',
                                                                   'default handler for the signal).  If not specified, "do_I<signal_name>",',
                                                                   'in the current package, is used.',
                                                                   '',
                                                                   '=item return_type => package name or undef',
                                                                   '',
                                                                   'Return type for the signal.  If not specified, then the signal has void return.',
                                                                   '',
                                                                   '=item param_types => ARRAYREF',
                                                                   '',
                                                                   'Reference to a list of parameter types (package names), I<omitting the instance',
                                                                   'and user data>.  Callbacks connected to this signal will receive the instance',
                                                                   'object as the first argument, followed by arguments with the types listed here,',
                                                                   'and finally by any user data that was supplied when the callback was connected.',
                                                                   'Not specifying this key is equivalent to supplying an empty list, which',
                                                                   'actually means instance and maybe data.',
                                                                   '',
                                                                   '=item flags => Glib::SignalFlags',
                                                                   '',
                                                                   'Flags describing this signal\'s properties. See the GObject C API reference\'',
                                                                   'description of GSignalFlags for a complete description.',
                                                                   '',
                                                                   '=item accumulator => subroutine or undef',
                                                                   '',
                                                                   'The signal accumulator is a special callback that can be used to collect return',
                                                                   'values of the various callbacks that are called during a signal emission.',
                                                                   'Generally, you can omit this parameter; custom accumulators are used to do',
                                                                   'things like stopping signal propagation by return value or creating a list of',
                                                                   'returns, etc.  See L<Glib::Object::Subclass/SIGNALS> for details.',
                                                                   '',
                                                                   '=back',
                                                                   '',
                                                                   '=item properties => ARRAYREF',
                                                                   '',
                                                                   'Array of Glib::ParamSpec objects, each describing an object property to add',
                                                                   'to the new type.  These properties are available for use by all code that',
                                                                   'can access the object, regardless of implementation language.  See',
                                                                   'L<Glib::ParamSpec>.  This list may be empty; if it is not, the functions',
                                                                   'C<GET_PROPERTY> and C<SET_PROPERTY> in I<$new_package> will be called to',
                                                                   'get and set the values.  Note that an object property is just a mechanism',
                                                                   'for getting and setting a value -- it implies no storage.  As a convenience,',
                                                                   'however, Glib::Object provides fallbacks for GET_PROPERTY and SET_PROPERTY',
                                                                   'which use the property nicknames as hash keys in the object variable for',
                                                                   'storage.',
                                                                   '',
                                                                   'Additionally, you may specify ParamSpecs as a describing hash instead of',
                                                                   'as an object; this form allows you to supply explicit getter and setter',
                                                                   'methods which override GET_PROPERY and SET_PROPERTY.  The getter and setter',
                                                                   'are both optional in the hash form.  For example:',
                                                                   '',
                                                                   '   Glib::Type->register_object (\'Glib::Object\', \'Foo\',',
                                                                   '      properties => [',
                                                                   '         # specified normally',
                                                                   '         Glib::ParamSpec->string (...),',
                                                                   '         # specified explicitly',
                                                                   '         {',
                                                                   '            pspec => Glib::ParamSpec->int (...),',
                                                                   '            set => sub {',
                                                                   '               my ($object, $newval) = @_;',
                                                                   '               ...',
                                                                   '            },',
                                                                   '            get => sub {',
                                                                   '               my ($object) = @_;',
                                                                   '               ...',
                                                                   '               return $val;',
                                                                   '            },',
                                                                   '         },',
                                                                   '      ]',
                                                                   '   );',
                                                                   '',
                                                                   'You can mix the two declaration styles as you like.  If you have',
                                                                   'individual C<get_foo> / C<set_foo> methods with the operative code for',
                                                                   'a property then the C<get>/C<set> form is a handy way to go straight',
                                                                   'to that.',
                                                                   '',
                                                                   '=item interfaces => ARRAYREF',
                                                                   '',
                                                                   'Array of interface package names that the new object implements.  Interfaces',
                                                                   'are the GObject way of doing multiple inheritance, thus, in Perl, the package',
                                                                   'names will be prepended to @ISA and certain inheritable and overrideable',
                                                                   'ALLCAPS methods will automatically be called whenever needed.  Which methods',
                                                                   'exactly depends on the interface -- Gtk2::CellEditable for example uses',
                                                                   'START_EDITING, EDITING_DONE, and REMOVE_WIDGET.',
                                                                   '',
                                                                   '=back',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2024'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'g_type_register_object',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'parent_package',
                                                         'type' => 'char *'
                                                       },
                                                       {
                                                         'name' => 'new_package',
                                                         'type' => 'char *'
                                                       },
                                                       {
                                                         'name' => '...'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::register_object',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'CODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2148',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '=for arg name package name for new enum type',
                                                                   '=for arg ... new enum\'s values; see description.',
                                                                   '=for signature Glib::Type->register_enum ($name, ...)',
                                                                   'Register and initialize a new Glib::Enum type with the provided "values".',
                                                                   'This creates a type properly registered GLib so that it can be used for',
                                                                   'property and signal parameter or return types created with',
                                                                   'C<< Glib::Type->register >> or C<Glib::Object::Subclass>.',
                                                                   '',
                                                                   'The list of values is used to create the "nicknames" that are used in general',
                                                                   'Perl code; the actual numeric values used at the C level are automatically',
                                                                   'assigned, starting with 1.  If you need to specify a particular numeric value',
                                                                   'for a nick, use an array reference containing the nickname and the numeric',
                                                                   'value, instead.  You may mix and match the two styles.',
                                                                   '',
                                                                   '  Glib::Type->register_enum (\'MyFoo::Bar\',',
                                                                   '          \'value-one\',            # assigned 1',
                                                                   '          \'value-two\',            # assigned 2',
                                                                   '          [\'value-three\' => 15 ], # explicit 15',
                                                                   '          [\'value-four\' => 35 ],  # explicit 35',
                                                                   '          \'value-five\',           # assigned 5',
                                                                   '  );',
                                                                   '',
                                                                   'If you use the array-ref form, beware: the code performs no validation',
                                                                   'for unique values.',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2242'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'g_type_register_enum',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'name',
                                                         'type' => 'const char *'
                                                       },
                                                       {
                                                         'name' => '...'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::register_enum',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'CODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2269',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '=for arg name package name of new flags type',
                                                                   '=for arg ... flag values, see discussion.',
                                                                   '=for signature Glib::Type->register_flags ($name, ...)',
                                                                   'Register and initialize a new Glib::Flags type with the provided "values".',
                                                                   'This creates a type properly registered GLib so that it can be used for',
                                                                   'property and signal parameter or return types created with',
                                                                   'C<< Glib::Type->register >> or C<Glib::Object::Subclass>.',
                                                                   '',
                                                                   'The list of values is used to create the "nicknames" that are used in general',
                                                                   'Perl code; the actual numeric values used at the C level are automatically',
                                                                   'assigned, of the form 1<<i, starting with i = 0.  If you need to specify a',
                                                                   'particular numeric value for a nick, use an array reference containing the',
                                                                   'nickname and the numeric value, instead.  You may mix and match the two styles.',
                                                                   '',
                                                                   '  Glib::Type->register_flags (\'MyFoo::Baz\',',
                                                                   '           \'value-one\',               # assigned 1<<0',
                                                                   '           \'value-two\',               # assigned 1<<1',
                                                                   '           [\'value-three\' => 1<<10 ], # explicit 1<<10',
                                                                   '           [\'value-four\' => 0x0f ],   # explicit 0x0f',
                                                                   '           \'value-five\',              # assigned 1<<4',
                                                                   '  );',
                                                                   '',
                                                                   'If you use the array-ref form, beware: the code performs no validation',
                                                                   'for unique values.',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2342'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'g_type_register_flags',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'name',
                                                         'type' => 'const char *'
                                                       },
                                                       {
                                                         'name' => '...'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::register_flags',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'CODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2369',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   'List the ancestry of I<package>, as seen by the GLib type system.  The',
                                                                   'important difference is that GLib\'s type system implements only single',
                                                                   'inheritance, whereas Perl\'s @ISA allows multiple inheritance.',
                                                                   '',
                                                                   'This returns the package names of the ancestral types in reverse order, with',
                                                                   'the root of the tree at the end of the list.',
                                                                   '',
                                                                   'See also L<list_interfaces ()|/"list = Glib::Type-E<gt>B<list_interfaces> ($package)">.',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2429'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'list_ancestors',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'package',
                                                         'type' => 'gchar *'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::list_ancestors',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'PPCODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2442',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   'List the GInterfaces implemented by the type associated with I<package>.',
                                                                   'The interfaces are returned as package names.',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2466'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'list_interfaces',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'package',
                                                         'type' => 'gchar *'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::list_interfaces',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'PPCODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2473',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   'List the signals associated with I<package>.  This lists only the signals',
                                                                   'for I<package>, not any of its parents.  The signals are returned as a list',
                                                                   'of anonymous hashes which mirror the GSignalQuery structure defined in the',
                                                                   'C API reference.',
                                                                   '',
                                                                   '=over',
                                                                   '',
                                                                   '=item - signal_id',
                                                                   '',
                                                                   'Numeric id of a signal.  It\'s rare that you\'ll need this in Gtk2-Perl.',
                                                                   '',
                                                                   '=item - signal_name',
                                                                   '',
                                                                   'Name of the signal, such as what you\'d pass to C<signal_connect>.',
                                                                   '',
                                                                   '=item - itype',
                                                                   '',
                                                                   'The I<i>nstance I<type> for which this signal is defined.',
                                                                   '',
                                                                   '=item - signal_flags',
                                                                   '',
                                                                   'GSignalFlags describing this signal.',
                                                                   '',
                                                                   '=item - return_type',
                                                                   '',
                                                                   'The return type expected from handlers for this signal.  If undef or not',
                                                                   'present, then no return is expected.  The type name is mapped to the ',
                                                                   'corresponding Perl package name if it is known, otherwise you get the',
                                                                   'raw C name straight from GLib.',
                                                                   '',
                                                                   '=item - param_types',
                                                                   '',
                                                                   'The types of the parameters passed to any callbacks connected to the emission',
                                                                   'of this signal.  The list does not include the instance, which is always',
                                                                   'first, and the user data from C<signal_connect>, which is always last (unless',
                                                                   'the signal was connected with "swap", which swaps the instance and the data,',
                                                                   'but you get the point).',
                                                                   '',
                                                                   '=back',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2502'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'list_signals',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'package',
                                                         'type' => 'gchar *'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::list_signals',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'PPCODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2546',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   'List the legal values for the GEnum or GFlags type I<$package>.  If I<$package>',
                                                                   'is not a package name registered with the bindings, this name is passed on to',
                                                                   'g_type_from_name() to see if it\'s a registered flags or enum type that just',
                                                                   'hasn\'t been registered with the bindings by C<gperl_register_fundamental()>',
                                                                   '(see Glib::xsapi).  If I<$package> is not the name of an enum or flags type,',
                                                                   'this function will croak.',
                                                                   '',
                                                                   'Returns the values as a list of hashes, one hash for each value, containing',
                                                                   'the value, name and nickname, eg. for Glib::SignalFlags',
                                                                   '',
                                                                   '    { value => 8,',
                                                                   '      name  => \'G_SIGNAL_NO_RECURSE\',',
                                                                   '      nick  => \'no-recurse\'',
                                                                   '    }',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2581'
                                                    },
                                           'gerror' => '',
                                           'function' => '',
                                           'original_name' => 'list_values',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'package',
                                                         'type' => 'const char *'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::list_values',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'PPCODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2600',
                                           'module' => 'Glib::Type'
                                         },
                                         {
                                           'pod' => {
                                                      'filename' => 'GType.xs',
                                                      'lines' => [
                                                                   '=for apidoc',
                                                                   '',
                                                                   'Convert a C type name to the corresponding Perl package name.  If no package',
                                                                   'is registered to that type, returns I<$cname>. ',
                                                                   '',
                                                                   '=cut'
                                                                 ],
                                                      'line' => '2638'
                                                    },
                                           'gerror' => '',
                                           'return_type' => [
                                                              'const char *'
                                                            ],
                                           'function' => '',
                                           'original_name' => 'package_from_cname',
                                           'args' => [
                                                       {
                                                         'name' => 'class',
                                                         'type' => undef
                                                       },
                                                       {
                                                         'name' => 'cname',
                                                         'type' => 'const char *'
                                                       }
                                                     ],
                                           'symname' => 'Glib::Type::package_from_cname',
                                           'package' => 'Glib::Type',
                                           'deprecated' => '',
                                           'codetype' => 'CODE',
                                           'filename' => 'GType.xs',
                                           'preprocessor_conditionals' => [],
                                           'hidden' => '',
                                           'line' => '2645',
                                           'module' => 'Glib::Type'
                                         }
                                       ],
                            'pods' => [
                                        {
                                          'filename' => 'GType.xs',
                                          'lines' => [
                                                       '=for object Glib::Type Utilities for dealing with the GLib Type system',
                                                       '',
                                                       '=for flags Glib::SignalFlags',
                                                       '=cut'
                                                     ],
                                          'line' => '1900'
                                        },
                                        {
                                          'filename' => 'GType.xs',
                                          'position' => 'DESCRIPTION',
                                          'lines' => [
                                                       '=for position DESCRIPTION',
                                                       '',
                                                       '=head1 DESCRIPTION',
                                                       '',
                                                       'This package defines several utilities for dealing with the GLib type system',
                                                       'from Perl.  Because of some fundamental differences in how the GLib and Perl',
                                                       'type systems work, a fair amount of the binding magic leaks out, and you can',
                                                       'find most of that in the C<Glib::Type::register*> functions, which register',
                                                       'new types with the GLib type system.',
                                                       '',
                                                       'Most of the rest of the functions provide introspection functionality, such as',
                                                       'listing properties and values and other cool stuff that is used mainly by',
                                                       'Glib\'s reference documentation generator (see L<Glib::GenPod>).',
                                                       '',
                                                       '=cut'
                                                     ],
                                          'line' => '1905'
                                        }
                                      ],
                            'blurb' => ' Utilities for dealing with the GLib Type system'
                          },
          'Glib::BookmarkFile' => {
                                    'xsubs' => [
                                                 {
                                                   'pod' => {
                                                              'lines' => []
                                                            },
                                                   'original_name' => 'DESTROY',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::DESTROY',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'line' => '116',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'lines' => []
                                                            },
                                                   'return_type' => [
                                                                      'GBookmarkFile *'
                                                                    ],
                                                   'original_name' => 'g_bookmark_file_new',
                                                   'args' => [
                                                               {
                                                                 'name' => 'class',
                                                                 'type' => undef
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::new',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'line' => '121',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Parses a bookmark file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '128'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_load_from_file',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'file',
                                                                 'type' => 'GPerlFilename_const'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::load_from_file',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '132',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Parses a string containing a bookmark file structure.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '142'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_load_from_data',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'buf',
                                                                 'type' => 'SV *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::load_from_data',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '146',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature ($full_path) = $bookmark_file->load_from_data_dirs ($file)',
                                                                           '',
                                                                           'Parses a bookmark file, searching for it inside the data directories.',
                                                                           'If a file is found, it returns the full path.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '158'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_load_from_data_dirs',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'file',
                                                                 'type' => 'GPerlFilename_const'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::load_from_data_dirs',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '165',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Returns the bookmark file as a string.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '182'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gchar_own *'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_to_data',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::to_data',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '186',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Saves the contents of a bookmark file into a file.  The write operation',
                                                                           'is guaranteed to be atomical by writing the contents of the bookmark file',
                                                                           'to a temporary file and then moving the file to the target file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '198'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_to_file',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'file',
                                                                 'type' => 'GPerlFilename_const'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::to_file',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '204',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Looks whether the bookmark file has a bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '214'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [
                                                                      'gboolean'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_has_item',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::has_item',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '218',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Removes the bookmark for $uri from the bookmark file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '220'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_remove_item',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::remove_item',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '224',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Changes the URI of a bookmark item from $old_uri to $new_uri.  Any',
                                                                           'existing bookmark for $new_uri will be overwritten.  If $new_uri is',
                                                                           'undef, then the bookmark is removed.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '232'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_move_item',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'old_uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'new_uri',
                                                                 'type' => 'const gchar_ornull *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::move_item',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '238',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Gets the number of bookmarks inside the bookmark file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '249'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [
                                                                      'gint'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_size',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_size',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '253',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           '=signature list = $bookmark_file->get_uris',
                                                                           'Returns the URI of all the bookmarks in the bookmark file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '254'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_uris',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_uris',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '259',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Sets the title of the bookmark for $uri.  If no bookmark for $uri is found',
                                                                           'one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '274'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_title',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'title',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_title',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '279',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature $bookmark_file->get_title ($uri, $title)',
                                                                           'Gets the title of the bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '281'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gchar_own *'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_title',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_title',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '286',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Sets the description of the bookmark for $uri.  If no bookmark for $uri',
                                                                           'is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '298'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_description',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'description',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_description',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '303',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature $bookmark_file->get_description ($uri)',
                                                                           'Gets the description of the bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '305'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gchar_own *'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_description',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_description',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '310',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Sets the MIME type of the bookmark for $uri.  If no bookmark for $uri',
                                                                           'is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '322'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_mime_type',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'mime_type',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_mime_type',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '327',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Gets the MIME type of the bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '329'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gchar_own *'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_mime_type',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_mime_type',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '333',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           '=for arg ... one or more group names',
                                                                           'Sets a list of group names for the item with URI $uri.  Each previously',
                                                                           'set group name list is removed.  If no bookmark for $uri is found one',
                                                                           'is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '345'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_groups',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => '...'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_groups',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '352',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Adds $group to the list of groups to which the bookmark for $uri',
                                                                           'belongs to.  If no bookmark for $uri is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '367'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_add_group',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'group',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::add_group',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '372',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Checks whether $group appears in the list of groups to which',
                                                                           'the bookmark for $uri belongs to.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '374'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gboolean'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_has_group',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'group',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::has_group',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '379',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Retrieves the list of group names of the bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '392'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_groups',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_groups',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '396',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Removes $group from the list of groups to which the bookmark',
                                                                           'for $uri belongs to.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '413'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_remove_group',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'group',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::remove_group',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '418',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Adds the application with $name and $exec to the list of',
                                                                           'applications that have registered a bookmark for $uri into',
                                                                           '$bookmark_file.',
                                                                           '',
                                                                           'Every bookmark inside a C<Glib::BookmarkFile> must have at least an',
                                                                           'application registered.  Each application must provide a name, a',
                                                                           'command line useful for launching the bookmark, the number of times',
                                                                           'the bookmark has been registered by the application and the last',
                                                                           'time the application registered this bookmark.',
                                                                           '',
                                                                           'If $name is undef, the name of the application will be the',
                                                                           'same returned by Glib::get_application_name(); if $exec is undef,',
                                                                           'the command line will be a composition of the program name as',
                                                                           'returned by Glib::get_prgname() and the "%u" modifier, which will',
                                                                           'be expanded to the bookmark\'s URI.',
                                                                           '',
                                                                           'This function will automatically take care of updating the',
                                                                           'registrations count and timestamping in case an application',
                                                                           'with the same $name had already registered a bookmark for',
                                                                           '$uri inside the bookmark file.  If no bookmark for $uri is found',
                                                                           'one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '429'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_add_application',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'name',
                                                                 'type' => 'const gchar_ornull *'
                                                               },
                                                               {
                                                                 'name' => 'exec',
                                                                 'type' => 'const gchar_ornull *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::add_application',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '453',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Checks whether the bookmark for $uri inside $bookmark_file has',
                                                                           'been registered by application $name.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '459'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gboolean'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_has_application',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'name',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::has_application',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '464',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Removes application registered with $name from the list of applications',
                                                                           'that have registered a bookmark for $uri inside $bookmark_file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '480'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_remove_application',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'name',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::remove_application',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '485',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature list = $bookmark_file->get_applications ($uri)',
                                                                           'Retrieves the names of the applications that have registered the',
                                                                           'bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '496'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_applications',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_applications',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '502',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           'Sets the meta-data of application $name inside the list of',
                                                                           'applications that have registered a bookmark for $uri inside',
                                                                           '$bookmark_file.',
                                                                           '',
                                                                           'You should rarely use this method; use Glib::BookmarkFile::add_application()',
                                                                           'and Glib::BookmarkFile::remove_application() instead.',
                                                                           '',
                                                                           '$name can be any UTF-8 encoded string used to identify an application.',
                                                                           '$exec can have one of these two modifiers: "%f", which will be expanded',
                                                                           'as the local file name retrieved from the bookmark\'s URI; "%u", which',
                                                                           'will be expanded as the bookmark\'s URI. The expansion is done automatically',
                                                                           'when retrieving the stored command line using the',
                                                                           'Glib::BookmarkFile::get_app_info() method.',
                                                                           '$count is the number of times the application has registered the',
                                                                           'bookmark; if it is < 0, the current registration count will be increased',
                                                                           'by one, if it is 0, the application with $name will be removed from',
                                                                           'the list of registered applications.',
                                                                           '$stamp is the Unix time of the last registration, as returned by time(); if',
                                                                           'it is -1, the current time will be used.',
                                                                           '',
                                                                           'If you try to remove an application by setting its registration count to',
                                                                           'zero, and no bookmark for $uri is found, %FALSE is returned and an',
                                                                           'exception is fired.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '521'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_app_info',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'name',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'exec',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'count',
                                                                 'type' => 'gint'
                                                               },
                                                               {
                                                                 'name' => 'stamp',
                                                                 'type' => 'time_t'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_app_info',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '547',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature ($exec, $count, $stamp) = $bookmark_file->get_app_info ($uri, $name)',
                                                                           'Gets the registration information of $name for the bookmark for',
                                                                           '$uri.  See Glib::BookmarkFile::set_app_info() for more information about',
                                                                           'the returned data.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '565'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_app_info',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'name',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_app_info',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '572',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '595'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_is_private',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'is_private',
                                                                 'type' => 'gboolean'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_is_private',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '598',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '600'
                                                            },
                                                   'gerror' => 1,
                                                   'return_type' => [
                                                                      'gboolean'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_is_private',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_is_private',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '603',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'Sets the icon for the bookmark for $uri.  If $href is undef, unsets',
                                                                           'the currently set icon.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '613'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_icon',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'href',
                                                                 'type' => 'const gchar_ornull *'
                                                               },
                                                               {
                                                                 'name' => 'mime_type',
                                                                 'type' => 'const gchar_ornull *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_icon',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '618',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc __gerror__',
                                                                           '=signature ($href, $mime_type) = $bookmark_file->get_icon ($uri)',
                                                                           'Gets the icon of the bookmark for $uri.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '624'
                                                            },
                                                   'gerror' => 1,
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_icon',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::get_icon',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'PPCODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'line' => '629',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::get_added',
                                                                           '=for apidoc __gerror__',
                                                                           'Gets the time the bookmark for $uri was added to $bookmark_file.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '646'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [
                                                                      'time_t'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_get_added',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'line' => '662',
                                                   'module' => 'Glib::BookmarkFile',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'symname' => 'Glib::BookmarkFile::get_added',
                                                   'codetype' => 'CODE',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {
                                                                'Glib::BookmarkFile::get_visited' => '2',
                                                                'Glib::BookmarkFile::get_modified' => '1'
                                                              }
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::get_modified',
                                                                           '=for apidoc __gerror__',
                                                                           'Gets the time the bookmark for $uri was last modified.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '651'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [],
                                                   'function' => '',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'original_name' => 'g_bookmark_file_get_added',
                                                   'module' => 'Glib::BookmarkFile',
                                                   'line' => '662',
                                                   'symname' => 'Glib::BookmarkFile::get_modified',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'codetype' => 'CODE',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {}
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::get_visited',
                                                                           '=for apidoc __gerror__',
                                                                           'Gets the time the bookmark for $uri was last visited.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '656'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [],
                                                   'function' => '',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               }
                                                             ],
                                                   'original_name' => 'g_bookmark_file_get_added',
                                                   'module' => 'Glib::BookmarkFile',
                                                   'line' => '662',
                                                   'symname' => 'Glib::BookmarkFile::get_visited',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'codetype' => 'CODE',
                                                   'deprecated' => '',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {}
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::set_added',
                                                                           'Sets the time the bookmark for $uri was added.',
                                                                           'If no bookmark for $uri is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '691'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'original_name' => 'g_bookmark_file_set_added',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'value',
                                                                 'type' => 'time_t'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::BookmarkFile::set_added',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {
                                                                'Glib::BookmarkFile::set_visited' => '2',
                                                                'Glib::BookmarkFile::set_modified' => '1'
                                                              },
                                                   'line' => '706',
                                                   'module' => 'Glib::BookmarkFile'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::set_modified',
                                                                           'Sets the time the bookmark for $uri was last modified.',
                                                                           'If no bookmark for $uri is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '696'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'value',
                                                                 'type' => 'time_t'
                                                               }
                                                             ],
                                                   'original_name' => 'g_bookmark_file_set_added',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'symname' => 'Glib::BookmarkFile::set_modified',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {},
                                                   'module' => 'Glib::BookmarkFile',
                                                   'line' => '706'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GBookmarkFile.xs',
                                                              'lines' => [
                                                                           '=for apidoc Glib::BookmarkFile::set_visited',
                                                                           'Sets the time the bookmark for $uri was last visited.',
                                                                           'If no bookmark for $uri is found one is created.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '701'
                                                            },
                                                   'gerror' => '',
                                                   'function' => '',
                                                   'args' => [
                                                               {
                                                                 'name' => 'bookmark_file',
                                                                 'type' => 'GBookmarkFile *'
                                                               },
                                                               {
                                                                 'name' => 'uri',
                                                                 'type' => 'const gchar *'
                                                               },
                                                               {
                                                                 'name' => 'value',
                                                                 'type' => 'time_t'
                                                               }
                                                             ],
                                                   'original_name' => 'g_bookmark_file_set_added',
                                                   'package' => 'Glib::BookmarkFile',
                                                   'symname' => 'Glib::BookmarkFile::set_visited',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GBookmarkFile.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'hidden' => '',
                                                   'alias' => {},
                                                   'module' => 'Glib::BookmarkFile',
                                                   'line' => '706'
                                                 }
                                               ],
                                    'pods' => [
                                                {
                                                  'filename' => 'GBookmarkFile.xs',
                                                  'lines' => [
                                                               '=for object Glib::BookmarkFile Parser for bookmark files',
                                                               '=cut'
                                                             ],
                                                  'line' => '53'
                                                },
                                                {
                                                  'filename' => 'GBookmarkFile.xs',
                                                  'position' => 'SYNOPSIS',
                                                  'lines' => [
                                                               '=for position SYNOPSIS',
                                                               '',
                                                               '=head1 SYNOPSIS',
                                                               '',
                                                               '  use Glib;',
                                                               '',
                                                               '  $date .= $_ while (<DATA>);',
                                                               '',
                                                               '  $b = Glib::BookmarkFile->new;',
                                                               '  $b->load_from_data($data);',
                                                               '  $uri = \'file:///some/path/to/a/file.txt\';',
                                                               '  if ($b->has_item($uri)) {',
                                                               '  	$title = $b->get_title($uri);',
                                                               '	$desc  = $b->get_description($uri);',
                                                               '',
                                                               '	print "Bookmark for `$uri\' ($title):\\n";',
                                                               '	print "  $desc\\n";',
                                                               '  }',
                                                               '  0;',
                                                               '',
                                                               '  __DATA__',
                                                               '  <?xml version="1.0" encoding="UTF-8"?>',
                                                               '  <xbel version="1.0"',
                                                               '        xmlns:bookmark="http://www.freedesktop.org/standards/desktop-bookmarks"',
                                                               '        xmlns:mime="http://www.freedesktop.org/standards/shared-mime-info">',
                                                               '    <bookmark href="file:///tmp/test-file.txt" added="2006-03-22T18:54:00Z" modified="2006-03-22T18:54:00Z" visited="2006-03-22T18:54:00Z">',
                                                               '      <title>Test File</title>',
                                                               '      <desc>Some test file</desc>',
                                                               '      <info>',
                                                               '        <metadata owner="http://freedesktop.org">',
                                                               '          <mime:mime-type type="text/plain"/>',
                                                               '          <bookmark:applications>',
                                                               '            <bookmark:application name="Gedit" exec="gedit %u" timestamp="1143053640" count="1"/>',
                                                               '          </bookmark:applications>',
                                                               '        </metadata>',
                                                               '      </info>',
                                                               '    </bookmark>',
                                                               '  </xbel>',
                                                               '',
                                                               '=for position DESCRIPTION',
                                                               '',
                                                               '=head1 DESCRIPTION',
                                                               '',
                                                               'B<Glib::BookmarkFile> lets you parse, edit or create files containing lists',
                                                               'of bookmarks to resources pointed to by URIs, with some meta-data bound to',
                                                               'them, following the Desktop Bookmark Specification.  The recent files support',
                                                               'inside GTK+ uses this type of files to store the list of recently used',
                                                               'files.',
                                                               '',
                                                               'The syntax of bookmark files is described in detail in the Desktop Bookmarks',
                                                               'Specification, here is a quick summary: bookmark files use a subclass of the',
                                                               'XML Bookmark Exchange Language (XBEL) document format, defining meta-data',
                                                               'such as the MIME type of the resource pointed by a bookmark, the list of',
                                                               'applications that have registered the same URI and the visibility of the',
                                                               'bookmark.',
                                                               '',
                                                               '=cut'
                                                             ],
                                                  'line' => '56'
                                                }
                                              ],
                                    'blurb' => ' Parser for bookmark files'
                                  },
          'Glib::Param::Enum' => {
                                   'pods' => [],
                                   'xsubs' => [
                                                {
                                                  'pod' => {
                                                             'lines' => []
                                                           },
                                                  'return_type' => [
                                                                     'const char *'
                                                                   ],
                                                  'original_name' => 'get_enum_class',
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec_enum',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'symname' => 'Glib::Param::Enum::get_enum_class',
                                                  'package' => 'Glib::Param::Enum',
                                                  'codetype' => 'CODE',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'line' => '1125',
                                                  'module' => 'Glib::ParamSpec'
                                                }
                                              ],
                                   'see_alsos' => [
                                                    'Glib::ParamSpec'
                                                  ]
                                 },
          'Glib::Signal' => {
                              'xsubs' => [
                                           {
                                             'pod' => {
                                                        'filename' => 'GClosure.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '=for arg func (subroutine)',
                                                                     '',
                                                                     'Install a subroutine to be executed when a signal emission traps an exception',
                                                                     '(a croak or die).  I<$func> should return boolean (true if the handler should',
                                                                     'remain installed) and expect to receive a single scalar.  This scalar will be a',
                                                                     'private copy of $@ which the handler can mangle to its heart\'s content.',
                                                                     '',
                                                                     'Returns an identifier that may be used with C<remove_exception_handler>.',
                                                                     '',
                                                                     'See C<gperl_install_exception_handler()> in L<Glib::xsapi>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '786'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'int'
                                                              ],
                                             'function' => '',
                                             'original_name' => 'gperl_install_exception_handler',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => undef
                                                         },
                                                         {
                                                           'name' => 'func',
                                                           'type' => 'SV *'
                                                         },
                                                         {
                                                           'name' => 'data',
                                                           'default' => 'NULL',
                                                           'type' => 'SV *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::install_exception_handler',
                                             'package' => 'Glib',
                                             'deprecated' => '',
                                             'filename' => 'GClosure.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '800',
                                             'module' => 'Glib::Closure'
                                           },
                                           {
                                             'pod' => {
                                                        'filename' => 'GClosure.xs',
                                                        'lines' => [
                                                                     '=for apidoc',
                                                                     '',
                                                                     'Remove the exception handler identified by I<$tag>, as returned by',
                                                                     'C<install_exception_handler>.  If I<$tag> cannot be found, this',
                                                                     'does nothing.',
                                                                     '',
                                                                     'WARNING:  Do not call this function from within an exception handler.',
                                                                     'If you want to remove your handler during its execution just have it',
                                                                     'return false.',
                                                                     '',
                                                                     'See C<gperl_remove_exception_handler()> in L<Glib::xsapi>.',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '805'
                                                      },
                                             'gerror' => '',
                                             'function' => '',
                                             'original_name' => 'gperl_remove_exception_handler',
                                             'args' => [
                                                         {
                                                           'name' => 'class',
                                                           'type' => undef
                                                         },
                                                         {
                                                           'name' => 'tag',
                                                           'type' => 'guint'
                                                         }
                                                       ],
                                             'symname' => 'Glib::remove_exception_handler',
                                             'package' => 'Glib',
                                             'deprecated' => '',
                                             'filename' => 'GClosure.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '819',
                                             'module' => 'Glib::Closure'
                                           }
                                         ],
                              'pods' => [
                                          {
                                            'filename' => 'GClosure.xs',
                                            'lines' => [
                                                         '=for object Glib::Signal Object customization and general purpose notification',
                                                         '',
                                                         '=cut'
                                                       ],
                                            'line' => '782'
                                          },
                                          {
                                            'filename' => 'GSignal.xs',
                                            'position' => 'DESCRIPTION',
                                            'lines' => [
                                                         '=for position DESCRIPTION',
                                                         '',
                                                         '=head1 DESCRIPTION',
                                                         '',
                                                         'This page describes some functions related to signals in Glib.  Since most',
                                                         'things you can do with signals are tied to L<Glib::Object> instances, the',
                                                         'majority of the signal functions are documented there.',
                                                         '',
                                                         '=head2 Thread safety',
                                                         '',
                                                         'Some libraries, most notably GStreamer, sometimes invoke signal handlers from a',
                                                         'foreign thread that has no Perl interpreter associated with it.  When this',
                                                         'happens, we have no choice but to hand the marshalling over to the main loop',
                                                         'which in turn later wakes up the main thread and lets it handle the request.',
                                                         'We cannot invoke the signal handler from the foreign thread since the Perl',
                                                         'interpreter may not be used concurrently.',
                                                         '',
                                                         'The downside to this approach is that the foreign thread is blocked until the',
                                                         'main thread has finished executing the signal handler.  This might lead to',
                                                         'deadlocks.  It might help in this case to wrap the crucial parts of the signal',
                                                         'handler inside a L<Glib::Idle> callback so that the signal handler can return',
                                                         'directly.',
                                                         '',
                                                         '=cut'
                                                       ],
                                            'line' => '550'
                                          }
                                        ],
                              'blurb' => ' Object customization and general purpose notification',
                              'see_alsos' => [
                                               'Glib::Object'
                                             ],
                              'enums' => [
                                           {
                                             'pod' => {
                                                        'filename' => 'GSignal.xs',
                                                        'lines' => [
                                                                     '=for flags Glib::SignalFlags',
                                                                     '',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '585'
                                                      },
                                             'name' => 'Glib::SignalFlags',
                                             'type' => 'flags'
                                           }
                                         ]
                            },
          'Glib::Error' => {
                             'xsubs' => [
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '',
                                                                    'The source line and file closest to the emission of the exception, in the same',
                                                                    'format that you\'d get from croak() or die().',
                                                                    '',
                                                                    'If there\'s non-ascii characters in the filename Perl leaves them as',
                                                                    'raw bytes, so you may have to put the string through',
                                                                    'Glib::filename_display_name for a wide-char form.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '433'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'char *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'location',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::location',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' 0'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '444',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '',
                                                                    'The error message.  This may be localized, as it is intended to be shown to a',
                                                                    'user.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '445'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'char *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'message',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::message',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' 0'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '452',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '',
                                                                    'The error domain.  You normally do not need this, as the object will be blessed',
                                                                    'into a corresponding class.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '453'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'char *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'domain',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::domain',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' 0'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '460',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '',
                                                                    'The enumeration value nickname of the integer value in C<< $error->code >>, ',
                                                                    'according to this error domain.  This will not be available if the error',
                                                                    'object is a base Glib::Error, because the bindings will have no idea how to',
                                                                    'get to the correct nickname.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '461'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'char *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'value',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::value',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' 0'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '470',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=forapidoc',
                                                                    '',
                                                                    'This is the numeric error code.  Normally, you\'ll want to use C<value> instead,',
                                                                    'for readability.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '471'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'int'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'code',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::code',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [
                                                                             ' 0'
                                                                           ],
                                            'hidden' => '',
                                            'line' => '478',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '=for signature scalar = Glib::Error::new ($class, $code, $message)',
                                                                    '=for signature scalar = $class->new ($code, $message)',
                                                                    '=for arg code (GEnum) an enumeration value, depends on I<$class>',
                                                                    '',
                                                                    'Create a new exception object of type I<$class>, where I<$class> is associated',
                                                                    'with a GError domain.  I<$code> should be a value from the enumeration type',
                                                                    'associated with this error domain.  I<$message> can be anything you like, but',
                                                                    'should explain what happened from the point of view of a user.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '491'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'SV *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'new',
                                            'args' => [
                                                        {
                                                          'name' => 'class',
                                                          'type' => 'const char *'
                                                        },
                                                        {
                                                          'name' => 'code',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'message',
                                                          'type' => 'const gchar *'
                                                        }
                                                      ],
                                            'line' => '503',
                                            'module' => 'Glib::Error',
                                            'package' => 'Glib::Error',
                                            'symname' => 'Glib::Error::new',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {
                                                         'Glib::Error::throw' => '1'
                                                       }
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc Glib::Error::throw',
                                                                    '=for signature scalar = Glib::Error::throw ($class, $code, $message)',
                                                                    '=for signature scalar = $class->throw ($code, $message)',
                                                                    '=for arg code (GEnum) an enumeration value, depends on I<$class>',
                                                                    '',
                                                                    'Throw an exception with a Glib::Error exception object.',
                                                                    'Equivalent to C<< croak (Glib::Error::new ($class, $code, $message)); >>.',
                                                                    '',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '481'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [],
                                            'function' => '',
                                            'args' => [
                                                        {
                                                          'name' => 'class',
                                                          'type' => 'const char *'
                                                        },
                                                        {
                                                          'name' => 'code',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'message',
                                                          'type' => 'const gchar *'
                                                        }
                                                      ],
                                            'original_name' => 'new',
                                            'module' => 'Glib::Error',
                                            'line' => '503',
                                            'symname' => 'Glib::Error::throw',
                                            'package' => 'Glib::Error',
                                            'codetype' => 'CODE',
                                            'deprecated' => '',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'alias' => {}
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc __function__',
                                                                    '=for arg package class name to register as a Glib::Error.',
                                                                    '=for arg enum_package class name of the enum type to use for this domain\'s error codes.',
                                                                    'Register a new error domain.  Glib::Error will be added @I<package>::ISA for',
                                                                    'you.  I<enum_package> must be a valid Glib::Enum type, either from a C library',
                                                                    'or registered with C<< Glib::Type::register_enum >>.  After registering an',
                                                                    'error domain, you can create or throw exceptions of this type.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '538'
                                                     },
                                            'gerror' => '',
                                            'function' => 1,
                                            'original_name' => 'register',
                                            'args' => [
                                                        {
                                                          'name' => 'package',
                                                          'type' => 'char *'
                                                        },
                                                        {
                                                          'name' => 'enum_package',
                                                          'type' => 'char *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::register',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '547',
                                            'module' => 'Glib::Error'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GError.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    'Returns true if the exception in I<$error> matches the given I<$domain> and',
                                                                    'I<$code>.  I<$domain> may be a class name or domain quark (that is, the real',
                                                                    'string used in C).  I<$code> may be an integer value or an enum nickname;',
                                                                    'the enum type depends on the value of I<$domain>.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '566'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'gboolean'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'matches',
                                            'args' => [
                                                        {
                                                          'name' => 'error',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'domain',
                                                          'type' => 'const char *'
                                                        },
                                                        {
                                                          'name' => 'code',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Error::matches',
                                            'package' => 'Glib::Error',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GError.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '573',
                                            'module' => 'Glib::Error'
                                          }
                                        ],
                             'pods' => [
                                         {
                                           'filename' => 'GError.xs',
                                           'lines' => [
                                                        '=for object Glib::Error Exception Objects based on GError',
                                                        '=cut'
                                                      ],
                                           'line' => '374'
                                         },
                                         {
                                           'filename' => 'GError.xs',
                                           'position' => 'SYNOPSIS',
                                           'lines' => [
                                                        '=for position SYNOPSIS',
                                                        '',
                                                        '=head1 SYNOPSIS',
                                                        '',
                                                        '  eval {',
                                                        '     my $pixbuf = Gtk2::Gdk::Pixbuf->new_from_file ($filename);',
                                                        '     $image->set_from_pixbuf ($pixbuf);',
                                                        '  };',
                                                        '  if ($@) {',
                                                        '     print "$@\\n";',
                                                        '     if (Glib::Error::matches ($@, \'Gtk2::Gdk::Pixbuf::Error\',',
                                                        '                                   \'unknown-format\')) {',
                                                        '        change_format_and_try_again ();',
                                                        '     } elsif (Glib::Error::matches ($@, \'Glib::File::Error\', \'noent\')) {',
                                                        '        change_source_dir_and_try_again ();',
                                                        '     } else {',
                                                        '        # don\'t know how to handle this',
                                                        '        die $@;',
                                                        '     }',
                                                        '  }',
                                                        '',
                                                        '=cut'
                                                      ],
                                           'line' => '377'
                                         },
                                         {
                                           'filename' => 'GError.xs',
                                           'position' => 'DESCRIPTION',
                                           'lines' => [
                                                        '=for position DESCRIPTION',
                                                        '',
                                                        '=head1 DESCRIPTION',
                                                        '',
                                                        'Gtk2-Perl translates GLib\'s GError runtime errors into Perl exceptions, by',
                                                        'creating exception objects based on Glib::Error.  Glib::Error overloads the',
                                                        'stringification operator, so a Glib::Error object will act like a string if',
                                                        'used with print() or warn(), so most code using $@ will not even know the',
                                                        'difference.',
                                                        '',
                                                        'The point of having exception objects, however, is that the error messages',
                                                        'in GErrors are often localized with NLS translation.  Thus, it\'s not good',
                                                        'for your code to attempt to handle errors by string matching on the the ',
                                                        'error message.  Glib::Error provides a way to get to the deterministic',
                                                        'error code.',
                                                        '',
                                                        'You will typically deal with objects that inherit from Glib::Error, such as',
                                                        'Glib::Convert::Error, Glib::File::Error, Gtk2::Gdk::Pixbuf::Error, etc; these',
                                                        'classes are provided by the libraries that define the error domains.  However,',
                                                        'it is possible to get a base Glib::Error when the bindings encounter an unknown',
                                                        'or unbound error domain.  The interface used here degrades nicely in such a',
                                                        'situation, but in general you should submit a bug report to the binding',
                                                        'maintainer if you get such an exception.',
                                                        '',
                                                        '=cut'
                                                      ],
                                           'line' => '400'
                                         }
                                       ],
                             'blurb' => ' Exception Objects based on GError'
                           },
          'Glib::OptionContext' => {
                                     'xsubs' => [
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'GOptionContext_own *'
                                                                     ],
                                                    'original_name' => 'g_option_context_new',
                                                    'args' => [
                                                                {
                                                                  'name' => 'class',
                                                                  'type' => undef
                                                                },
                                                                {
                                                                  'name' => 'parameter_string',
                                                                  'type' => 'const gchar *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::new',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '696',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'original_name' => 'g_option_context_set_help_enabled',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                },
                                                                {
                                                                  'name' => 'help_enabled',
                                                                  'type' => 'gboolean'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::set_help_enabled',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '702',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'gboolean'
                                                                     ],
                                                    'original_name' => 'g_option_context_get_help_enabled',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::get_help_enabled',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '704',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'original_name' => 'g_option_context_set_ignore_unknown_options',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                },
                                                                {
                                                                  'name' => 'ignore_unknown',
                                                                  'type' => 'gboolean'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::set_ignore_unknown_options',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '706',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'gboolean'
                                                                     ],
                                                    'original_name' => 'g_option_context_get_ignore_unknown_options',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::get_ignore_unknown_options',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '708',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'filename' => 'GOption.xs',
                                                               'lines' => [
                                                                            '=for signature',
                                                                            '=arg entries reference to an array of option entries',
                                                                            '=cut'
                                                                          ],
                                                               'line' => '710'
                                                             },
                                                    'gerror' => '',
                                                    'function' => '',
                                                    'original_name' => 'g_option_context_add_main_entries',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                },
                                                                {
                                                                  'name' => 'entries',
                                                                  'type' => 'SV *'
                                                                },
                                                                {
                                                                  'name' => 'translation_domain',
                                                                  'type' => 'const gchar *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::add_main_entries',
                                                    'package' => 'Glib::OptionContext',
                                                    'deprecated' => '',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'hidden' => '',
                                                    'line' => '714',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'filename' => 'GOption.xs',
                                                               'lines' => [
                                                                            '=for apidoc __gerror__',
                                                                            'This method works directly on I<@ARGV>.',
                                                                            '=cut'
                                                                          ],
                                                               'line' => '736'
                                                             },
                                                    'gerror' => 1,
                                                    'return_type' => [
                                                                       'gboolean'
                                                                     ],
                                                    'function' => '',
                                                    'original_name' => 'g_option_context_parse',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::parse',
                                                    'package' => 'Glib::OptionContext',
                                                    'deprecated' => '',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'hidden' => '',
                                                    'line' => '740',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'original_name' => 'g_option_context_add_group',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                },
                                                                {
                                                                  'name' => 'group',
                                                                  'type' => 'GOptionGroup *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::add_group',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '765',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'original_name' => 'g_option_context_set_main_group',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                },
                                                                {
                                                                  'name' => 'group',
                                                                  'type' => 'GOptionGroup *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::set_main_group',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '773',
                                                    'module' => 'Glib::Option'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [
                                                                       'GOptionGroup *'
                                                                     ],
                                                    'original_name' => 'g_option_context_get_main_group',
                                                    'args' => [
                                                                {
                                                                  'name' => 'context',
                                                                  'type' => 'GOptionContext *'
                                                                }
                                                              ],
                                                    'symname' => 'Glib::OptionContext::get_main_group',
                                                    'package' => 'Glib::OptionContext',
                                                    'filename' => 'GOption.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'line' => '780',
                                                    'module' => 'Glib::Option'
                                                  }
                                                ],
                                     'pods' => [
                                                 {
                                                   'filename' => 'GOption.xs',
                                                   'position' => 'SYNOPSIS',
                                                   'lines' => [
                                                                '=for position SYNOPSIS',
                                                                '',
                                                                '=head1 SYNOPSIS',
                                                                '',
                                                                '  my ($verbose, $source, $filenames) = (\'\', undef, []);',
                                                                '',
                                                                '  my $entries = [',
                                                                '    { long_name => \'verbose\',',
                                                                '      short_name => \'v\',',
                                                                '      arg_type => \'none\',',
                                                                '      arg_value => \\$verbose,',
                                                                '      description => \'be verbose\' },',
                                                                '',
                                                                '    { long_name => \'source\',',
                                                                '      short_name => \'s\',',
                                                                '      arg_type => \'string\',',
                                                                '      arg_value => \\$source,',
                                                                '      description => \'set the source\',',
                                                                '      arg_description => \'source\' },',
                                                                '',
                                                                '    [ \'filenames\', \'f\', \'filename-array\', \\$filenames ],',
                                                                '  ];',
                                                                '',
                                                                '  my $context = Glib::OptionContext->new (\'- urgsify your life\');',
                                                                '  $context->add_main_entries ($entries, \'C\');',
                                                                '  $context->parse ();',
                                                                '',
                                                                '  # $verbose, $source, and $filenames are now updated according to the',
                                                                '  # command line options given',
                                                                '',
                                                                '=cut'
                                                              ],
                                                   'line' => '662'
                                                 }
                                               ]
                                   },
          'Glib::KeyFile' => {
                               'xsubs' => [
                                            {
                                              'pod' => {
                                                         'lines' => []
                                                       },
                                              'original_name' => 'DESTROY',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::DESTROY',
                                              'package' => 'Glib::KeyFile',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'line' => '139',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'lines' => []
                                                       },
                                              'return_type' => [
                                                                 'GKeyFile *'
                                                               ],
                                              'original_name' => 'g_key_file_new',
                                              'args' => [
                                                          {
                                                            'name' => 'class',
                                                            'type' => undef
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::new',
                                              'package' => 'Glib::KeyFile',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'line' => '144',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Sets the list separator character.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '151'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_list_separator',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'separator',
                                                            'type' => 'gchar'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_list_separator',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '155',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Parses a key file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '162'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gboolean'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_load_from_file',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'file',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'flags',
                                                            'type' => 'GKeyFileFlags'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::load_from_file',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '166',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Parses a string containing a key file structure.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '179'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gboolean'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_load_from_data',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'buf',
                                                            'type' => 'SV *'
                                                          },
                                                          {
                                                            'name' => 'flags',
                                                            'type' => 'GKeyFileFlags'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::load_from_data',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '183',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      '=signature boolean = $key_file->load_from_dirs ($file, $flags, @search_dirs)',
                                                                      '=signature (boolean, scalar) = $key_file->load_from_dirs ($file, $flags, @search_dirs)',
                                                                      '',
                                                                      'Parses a key file, searching for it inside the specified directories.',
                                                                      'In scalar context, it returns a boolean value (true on success, false otherwise);',
                                                                      'in array context, it returns a boolean value and the full path of the file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '200'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_load_from_dirs',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'file',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'flags',
                                                            'type' => 'GKeyFileFlags'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::load_from_dirs',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [
                                                                               ' GLIB_CHECK_VERSION (2, 14, 0)'
                                                                             ],
                                              'hidden' => '',
                                              'line' => '209',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      '=signature boolean = $key_file->load_from_data_dirs ($file, $flags)',
                                                                      '=signature (boolean, scalar) = $key_file->load_from_data_dirs ($file, $flags)',
                                                                      '',
                                                                      'Parses a key file, searching for it inside the data directories.',
                                                                      'In scalar context, it returns a boolean value (true on success, false otherwise);',
                                                                      'in array context, it returns a boolean value and the full path of the file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '249'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_load_from_data_dirs',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'file',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'flags',
                                                            'type' => 'GKeyFileFlags'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::load_from_data_dirs',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '258',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Returns the key file as a string.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '279'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gchar_own *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_to_data',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::to_data',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '283',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Returns the first group inside a key file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '295'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [
                                                                 'gchar_own *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_start_group',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_start_group',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '299',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      '=signature list = $key_file->get_groups',
                                                                      'Returns the list of groups inside the key_file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '302'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_groups',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_groups',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '307',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      '=signature list = $key_file->get_keys ($group_name)',
                                                                      'Returns the list of keys inside a group of the key file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '321'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_keys',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_keys',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '326',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Checks whether $group_name is present in $key_file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '344'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [
                                                                 'gboolean'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_has_group',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::has_group',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '348',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Checks whether $group_name has $key in it.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '353'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gboolean'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_has_key',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::has_key',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '357',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Retrieves the literal value of $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '370'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gchar_own *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_value',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_value',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '374',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Sets the literal value of $key inside $group_name.',
                                                                      'If $key cannot be found, it is created.',
                                                                      'If $group_name cannot be found, it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '387'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_value',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'value',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_value',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '393',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_boolean',
                                                                      '=arg value (gboolean)',
                                                                      'Sets a boolean value to $key inside $group_name.',
                                                                      'If $key is not found, it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '399'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_boolean',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'value',
                                                            'type' => 'SV *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_boolean',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {
                                                           'Glib::KeyFile::set_integer' => '1',
                                                           'Glib::KeyFile::set_string' => '2'
                                                         },
                                              'line' => '419',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_integer',
                                                                      '=arg value (gint)',
                                                                      'Sets an integer value to $key inside $group_name.',
                                                                      'If $key is not found, it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '405'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'value',
                                                            'type' => 'SV *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_set_boolean',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::set_integer',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '419'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_string',
                                                                      '=arg value (gchar*)',
                                                                      'Sets a string value to $key inside $group_name.  The string will be escaped if',
                                                                      'it contains special characters.',
                                                                      'If $key is not found, it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '411'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'value',
                                                            'type' => 'SV *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_set_boolean',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::set_string',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '419'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Sets a double value to $key inside $group_name.',
                                                                      'If $key is not found, it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '448'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_double',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'value',
                                                            'type' => 'gdouble'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_double',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [
                                                                               ' GLIB_CHECK_VERSION (2, 12, 0)'
                                                                             ],
                                              'hidden' => '',
                                              'line' => '453',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_boolean __gerror__',
                                                                      '=signature boolean = $key_file->get_boolean ($group_name, $key)',
                                                                      'Retrieves a boolean value from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '456'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'SV *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_boolean',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'line' => '472',
                                              'module' => 'Glib::KeyFile',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::get_boolean',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {
                                                           'Glib::KeyFile::get_integer' => '1',
                                                           'Glib::KeyFile::get_string' => '2'
                                                         }
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_integer __gerror__',
                                                                      '=signature integer = $key_file->get_integer ($group_name, $key)',
                                                                      'Retrieves an integer value from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '461'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [],
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_get_boolean',
                                              'module' => 'Glib::KeyFile',
                                              'line' => '472',
                                              'symname' => 'Glib::KeyFile::get_integer',
                                              'package' => 'Glib::KeyFile',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_string __gerror__',
                                                                      '=signature string = $key_file->get_string ($group_name, $key)',
                                                                      'Retrieves a string value from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '466'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [],
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_get_boolean',
                                              'module' => 'Glib::KeyFile',
                                              'line' => '472',
                                              'symname' => 'Glib::KeyFile::get_string',
                                              'package' => 'Glib::KeyFile',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Retrieves a double value from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '526'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gdouble'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_double',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_double',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [
                                                                               ' GLIB_CHECK_VERSION (2, 12, 0)'
                                                                             ],
                                              'hidden' => '',
                                              'line' => '530',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Returns the value associated with $key under $group_name translated in the',
                                                                      'given $locale if available.  If $locale is undef then the current locale is',
                                                                      'assumed.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '546'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gchar_own *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_locale_string',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'locale',
                                                            'default' => 'NULL',
                                                            'type' => 'const gchar_ornull *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_locale_string',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '552',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'lines' => []
                                                       },
                                              'original_name' => 'g_key_file_set_locale_string',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'locale',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'string',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_locale_string',
                                              'package' => 'Glib::KeyFile',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'line' => '570',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '577'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_locale_string_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'locale',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_locale_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '580',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Associates a list of string values for $key and $locale under $group_name.',
                                                                      'If the translation for $key cannot be found then it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '601'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_locale_string_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'locale',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_locale_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '606',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_string_list __gerror__',
                                                                      '=signature list = $key_file->get_string_list ($group_name, $key)',
                                                                      'Retrieves a list of strings from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '626'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_string_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {
                                                           'Glib::KeyFile::get_boolean_list' => '1',
                                                           'Glib::KeyFile::get_integer_list' => '2'
                                                         },
                                              'line' => '642',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_boolean_list __gerror__',
                                                                      '=signature list = $key_file->get_boolean_list ($group_name, $key)',
                                                                      'Retrieves a list of booleans from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '636'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_get_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::get_boolean_list',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '642'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::get_integer_list __gerror__',
                                                                      '=signature list = $key_file->get_integer_list ($group_name, $key)',
                                                                      'Retrieves a list of integers from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '631'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_get_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::get_integer_list',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '642'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      '=signature list = $key_file->get_double_list ($group_name, $key)',
                                                                      'Retrieves a list of doubles from $key inside $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '700'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_double_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_double_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [
                                                                               ' GLIB_CHECK_VERSION (2, 12, 0)'
                                                                             ],
                                              'hidden' => '',
                                              'line' => '705',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_string_list',
                                                                      '=for arg ... list of strings',
                                                                      'Sets a list of strings in $key inside $group_name.  The strings will be escaped',
                                                                      'if contain special characters.  If $key cannot be found then it is created.  If',
                                                                      '$group_name cannot be found then it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '727'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_string_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {
                                                           'Glib::KeyFile::set_boolean_list' => '1',
                                                           'Glib::KeyFile::set_integer_list' => '2'
                                                         },
                                              'line' => '747',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_boolean_list',
                                                                      '=for arg ... list of booleans',
                                                                      'Sets a list of booleans in $key inside $group_name.  If $key cannot be found',
                                                                      'then it is created.  If $group_name cannot be found then it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '734'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_set_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::set_boolean_list',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '747'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::KeyFile::set_integer_list',
                                                                      '=for arg ... list of integers',
                                                                      'Sets a list of doubles in $key inside $group_name.  If $key cannot be found',
                                                                      'then it is created.  If $group_name cannot be found then it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '740'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'original_name' => 'g_key_file_set_string_list',
                                              'package' => 'Glib::KeyFile',
                                              'symname' => 'Glib::KeyFile::set_integer_list',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {},
                                              'module' => 'Glib::KeyFile',
                                              'line' => '747'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      '=for arg ... list of doubles',
                                                                      'Sets a list of doubles in $key inside $group_name.  If $key cannot be found',
                                                                      'then it is created.  If $group_name cannot be found then it is created.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '802'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_double_list',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => '...'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_double_list',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [
                                                                               ' GLIB_CHECK_VERSION (2, 12, 0)'
                                                                             ],
                                              'hidden' => '',
                                              'line' => '808',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Places a comment above $key from $group_name.  If $key is undef then $comment',
                                                                      'will be written above $group_name.  If both $key and $group_name are undef,',
                                                                      'then $comment will be written above the first group in the file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '828'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_set_comment',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar_ornull *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar_ornull *'
                                                          },
                                                          {
                                                            'name' => 'comment',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::set_comment',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '834',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Retreives a comment above $key from $group_name.  If $key is undef then',
                                                                      '$comment will be read from above $group_name.  If both $key and $group_name',
                                                                      'are undef, then $comment will be read from above the first group in the file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '846'
                                                       },
                                              'gerror' => 1,
                                              'return_type' => [
                                                                 'gchar_own *'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'g_key_file_get_comment',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'default' => 'NULL',
                                                            'type' => 'const gchar_ornull *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'default' => 'NULL',
                                                            'type' => 'const gchar_ornull *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::get_comment',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '852',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Removes a comment from a group in a key file.  If $key is undef, the comment',
                                                                      'will be removed from above $group_name.  If both $key and $group_name are',
                                                                      'undef, the comment will be removed from the top of the key file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '865'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_remove_comment',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'default' => 'NULL',
                                                            'type' => 'const gchar_ornull *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'default' => 'NULL',
                                                            'type' => 'const gchar_ornull *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::remove_comment',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '871',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Removes a key from $group_name.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '882'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_remove_key',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          },
                                                          {
                                                            'name' => 'key',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::remove_key',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '886',
                                              'module' => 'Glib::KeyFile'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for apidoc __gerror__',
                                                                      'Removes a group from a key file.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '897'
                                                       },
                                              'gerror' => 1,
                                              'function' => '',
                                              'original_name' => 'g_key_file_remove_group',
                                              'args' => [
                                                          {
                                                            'name' => 'key_file',
                                                            'type' => 'GKeyFile *'
                                                          },
                                                          {
                                                            'name' => 'group_name',
                                                            'type' => 'const gchar *'
                                                          }
                                                        ],
                                              'symname' => 'Glib::KeyFile::remove_group',
                                              'package' => 'Glib::KeyFile',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GKeyFile.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '900',
                                              'module' => 'Glib::KeyFile'
                                            }
                                          ],
                               'pods' => [
                                           {
                                             'filename' => 'GKeyFile.xs',
                                             'lines' => [
                                                          '=for object Glib::KeyFile Parser for .ini-like files',
                                                          '=cut'
                                                        ],
                                             'line' => '89'
                                           },
                                           {
                                             'filename' => 'GKeyFile.xs',
                                             'position' => 'SYNOPSIS',
                                             'lines' => [
                                                          '=for position SYNOPSIS',
                                                          '',
                                                          '=head1 SYNOPSIS',
                                                          '',
                                                          '  use Glib;',
                                                          '',
                                                          '  $data .= $_ while (<DATA>);',
                                                          '',
                                                          '  $f = Glib::KeyFile->new;',
                                                          '  $f->load_from_data($data);',
                                                          '  if ($f->has_group(\'Main\') && $f->has_key(\'Main\', \'someotherkey\')) {',
                                                          '      $val = $f->get_integer(\'Main\', \'someotherkey\');',
                                                          '      print $val . "\\n";',
                                                          '  }',
                                                          '  0;',
                                                          '  __DATA__',
                                                          '  # a comment',
                                                          '  [MainSection]',
                                                          '  somekey=somevalue',
                                                          '  someotherkey=42',
                                                          '  someboolkey=true',
                                                          '  listkey=1;1;2;3;5;8;13;21',
                                                          '  localekey=Good Morning',
                                                          '  localekey[it]=Buon giorno',
                                                          '  localekey[es]=Buenas dias',
                                                          '  localekey[fr]=Bonjour',
                                                          '',
                                                          '=for position DESCRIPTION',
                                                          '',
                                                          '=head1 DESCRIPTION',
                                                          '',
                                                          'B<Glib::KeyFile> lets you parse, edit or create files containing groups of',
                                                          'key-value pairs, which we call key files for lack of a better name. Several',
                                                          'freedesktop.org specifications use key files now, e.g the Desktop Entry',
                                                          'Specification and the Icon Theme Specification.',
                                                          '',
                                                          'The syntax of key files is described in detail in the Desktop Entry',
                                                          'Specification, here is a quick summary: Key files consists of groups of',
                                                          'key-value pairs, interspersed with comments.',
                                                          '',
                                                          '=cut'
                                                        ],
                                             'line' => '92'
                                           }
                                         ],
                               'blurb' => ' Parser for .ini-like files',
                               'enums' => [
                                            {
                                              'pod' => {
                                                         'filename' => 'GKeyFile.xs',
                                                         'lines' => [
                                                                      '=for enum Glib::KeyFileFlags',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '159'
                                                       },
                                              'name' => 'Glib::KeyFileFlags',
                                              'type' => 'enum'
                                            }
                                          ]
                             },
          'Glib::Param::Int64' => {
                                    'xsubs' => [
                                                 {
                                                   'pod' => {
                                                              'lines' => []
                                                            },
                                                   'return_type' => [
                                                                      'gint64'
                                                                    ],
                                                   'original_name' => 'get_minimum',
                                                   'args' => [
                                                               {
                                                                 'name' => 'pspec',
                                                                 'type' => 'GParamSpec *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::Param::Int64::get_minimum',
                                                   'package' => 'Glib::Param::Int64',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GParamSpec.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'line' => '1003',
                                                   'module' => 'Glib::ParamSpec'
                                                 },
                                                 {
                                                   'pod' => {
                                                              'lines' => []
                                                            },
                                                   'return_type' => [
                                                                      'gint64'
                                                                    ],
                                                   'original_name' => 'get_maximum',
                                                   'args' => [
                                                               {
                                                                 'name' => 'pspec',
                                                                 'type' => 'GParamSpec *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::Param::Int64::get_maximum',
                                                   'package' => 'Glib::Param::Int64',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GParamSpec.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'line' => '1010',
                                                   'module' => 'Glib::ParamSpec'
                                                 }
                                               ],
                                    'pods' => [
                                                {
                                                  'filename' => 'GParamSpec.xs',
                                                  'lines' => [
                                                               '=for object Glib::Param::Int64',
                                                               '',
                                                               '=head1 DESCRIPTION',
                                                               '',
                                                               'This page documents the extra accessors available for the signed 64 bit integer',
                                                               'type paramspecs.  On 32 bit machines and even on some 64 bit machines, perl',
                                                               'really only supports 32 bit integers, so all of these methods convert the',
                                                               'values to and from Perl strings if necessary.',
                                                               '',
                                                               '=cut'
                                                             ],
                                                  'line' => '991'
                                                }
                                              ]
                                  },
          'Glib::Flags' => {
                             'xsubs' => [
                                          {
                                            'pod' => {
                                                       'filename' => 'GType.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    'Create a new flags object with given bits.  This is for use from a',
                                                                    'subclass, it\'s not possible to create a C<Glib::Flags> object as such.',
                                                                    'For example,',
                                                                    '',
                                                                    '    my $f1 = Glib::ParamFlags->new (\'readable\');',
                                                                    '    my $f2 = Glib::ParamFlags->new ([\'readable\',\'writable\']);',
                                                                    '',
                                                                    'An object like this can then be used with the overloaded operators.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '2678'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'SV *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'new',
                                            'args' => [
                                                        {
                                                          'name' => 'class',
                                                          'type' => 'const char *'
                                                        },
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Flags::new',
                                            'package' => 'Glib::Flags',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '2689',
                                            'module' => 'Glib::Type'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GType.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '=for signature bool = $f->bool',
                                                                    '=for arg ... (__hide__)',
                                                                    'Return 1 if any bits are set in $f, or 0 if none are set.  This is the',
                                                                    'overload for $f in boolean context (like C<if>, etc).  You can call it',
                                                                    'as a method to get a true/false directly too.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '2707'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'int'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'bool',
                                            'args' => [
                                                        {
                                                          'name' => 'f',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => '...'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Flags::bool',
                                            'package' => 'Glib::Flags',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '2715',
                                            'module' => 'Glib::Type'
                                          },
                                          {
                                            'pod' => {
                                                       'filename' => 'GType.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '=for signature aref = $f->as_arrayref',
                                                                    '=for arg ... (__hide__)',
                                                                    'Return the bits of $f as a reference to an array of strings, like',
                                                                    '[\'flagbit1\',\'flagbit2\'].  This is the overload function for C<@{}>,',
                                                                    'ie. arrayizing $f.  You can call it directly as a method too.',
                                                                    '',
                                                                    'Note that @$f gives the bits as a list, but as_arrayref gives an arrayref.',
                                                                    'If an arrayref is what you want then the method style',
                                                                    'somefunc()->as_arrayref can be more readable than [@{somefunc()}].',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '2725'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'SV *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'as_arrayref',
                                            'args' => [
                                                        {
                                                          'name' => 'f',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => '...'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Flags::as_arrayref',
                                            'package' => 'Glib::Flags',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '2737',
                                            'module' => 'Glib::Type'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [
                                                               'int'
                                                             ],
                                            'original_name' => 'eq',
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'int'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Flags::eq',
                                            'package' => 'Glib::Flags',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {
                                                         'ne' => '1',
                                                         'ge' => '2'
                                                       },
                                            'line' => '2757',
                                            'module' => 'Glib::Type'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'int'
                                                        }
                                                      ],
                                            'original_name' => 'eq',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'ne',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2757'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'int'
                                                        }
                                                      ],
                                            'original_name' => 'eq',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'ge',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2757'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [
                                                               'SV *'
                                                             ],
                                            'original_name' => 'union',
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Flags::union',
                                            'package' => 'Glib::Flags',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {
                                                         'xor' => '3',
                                                         'sub' => '1',
                                                         'intersect' => '2',
                                                         'all' => '4'
                                                       },
                                            'line' => '2782',
                                            'module' => 'Glib::Type'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'original_name' => 'union',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'sub',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2782'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'original_name' => 'union',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'intersect',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2782'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'original_name' => 'union',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'xor',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2782'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'return_type' => [],
                                            'args' => [
                                                        {
                                                          'name' => 'a',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'b',
                                                          'type' => 'SV *'
                                                        },
                                                        {
                                                          'name' => 'swap',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'original_name' => 'union',
                                            'package' => 'Glib::Flags',
                                            'symname' => 'all',
                                            'codetype' => 'CODE',
                                            'filename' => 'GType.xs',
                                            'preprocessor_conditionals' => [],
                                            'alias' => {},
                                            'module' => 'Glib::Type',
                                            'line' => '2782'
                                          }
                                        ],
                             'pods' => [
                                         {
                                           'filename' => 'GType.xs',
                                           'position' => 'DESCRIPTION',
                                           'lines' => [
                                                        '=for position DESCRIPTION',
                                                        '',
                                                        '=head1 DESCRIPTION',
                                                        '',
                                                        'Glib maps flag and enum values to the nicknames strings provided by the',
                                                        'underlying C libraries.  Representing flags this way in Perl is an interesting',
                                                        'problem, which Glib solves by using some cool overloaded operators. ',
                                                        '',
                                                        'The functions described here actually do the work of those overloaded',
                                                        'operators.  See the description of the flags operators in the "This Is',
                                                        'Now That" section of L<Glib> for more info.',
                                                        '',
                                                        '=cut'
                                                      ],
                                           'line' => '2664'
                                         }
                                       ]
                           },
          'Glib::version' => {
                               'xsubs' => [
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc __function__',
                                                                      'Provides access to the version information that Glib was compiled against.',
                                                                      'Essentially equivalent to the #define\'s GLIB_MAJOR_VERSION.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '435'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [
                                                                 'guint'
                                                               ],
                                              'function' => 1,
                                              'original_name' => 'MAJOR_VERSION',
                                              'symname' => 'Glib::MAJOR_VERSION',
                                              'package' => 'Glib',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {
                                                           'Glib::minor_version' => '4',
                                                           'Glib::MINOR_VERSION' => '1',
                                                           'Glib::major_version' => '3',
                                                           'Glib::MICRO_VERSION' => '2',
                                                           'Glib::micro_version' => '5'
                                                         },
                                              'line' => '440',
                                              'module' => 'Glib::Utils'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::MINOR_VERSION __function__',
                                                                      'Provides access to the version information that Glib was compiled against.',
                                                                      'Essentially equivalent to the #define\'s GLIB_MINOR_VERSION.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '410'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [],
                                              'function' => 1,
                                              'args' => undef,
                                              'original_name' => 'MAJOR_VERSION',
                                              'module' => 'Glib::Utils',
                                              'line' => '440',
                                              'symname' => 'Glib::MINOR_VERSION',
                                              'package' => 'Glib',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::MICRO_VERSION __function__',
                                                                      'Provides access to the version information that Glib was compiled against.',
                                                                      'Essentially equivalent to the #define\'s GLIB_MICRO_VERSION.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '415'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [],
                                              'function' => 1,
                                              'args' => undef,
                                              'original_name' => 'MAJOR_VERSION',
                                              'module' => 'Glib::Utils',
                                              'line' => '440',
                                              'symname' => 'Glib::MICRO_VERSION',
                                              'package' => 'Glib',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::major_version __function__',
                                                                      'Provides access to the version information that Glib is linked against.',
                                                                      'Essentially equivalent to the global variable glib_major_version.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '420'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [],
                                              'function' => 1,
                                              'args' => undef,
                                              'original_name' => 'MAJOR_VERSION',
                                              'module' => 'Glib::Utils',
                                              'line' => '440',
                                              'symname' => 'Glib::major_version',
                                              'package' => 'Glib',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::minor_version __function__',
                                                                      'Provides access to the version information that Glib is linked against.',
                                                                      'Essentially equivalent to the global variable glib_minor_version.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '425'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [],
                                              'function' => 1,
                                              'args' => undef,
                                              'original_name' => 'MAJOR_VERSION',
                                              'module' => 'Glib::Utils',
                                              'line' => '440',
                                              'symname' => 'Glib::minor_version',
                                              'package' => 'Glib',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc Glib::micro_version __function__',
                                                                      'Provides access to the version information that Glib is linked against.',
                                                                      'Essentially equivalent to the global variable glib_micro_version.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '430'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [],
                                              'function' => 1,
                                              'args' => undef,
                                              'original_name' => 'MAJOR_VERSION',
                                              'module' => 'Glib::Utils',
                                              'line' => '440',
                                              'symname' => 'Glib::micro_version',
                                              'package' => 'Glib',
                                              'codetype' => 'CODE',
                                              'deprecated' => '',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'alias' => {}
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      '=for signature (MAJOR, MINOR, MICRO) = Glib->GET_VERSION_INFO',
                                                                      'Shorthand to fetch as a list the glib version for which Glib was compiled.',
                                                                      'See C<Glib::MAJOR_VERSION>, etc.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '463'
                                                       },
                                              'gerror' => '',
                                              'function' => '',
                                              'original_name' => 'GET_VERSION_INFO',
                                              'args' => [
                                                          {
                                                            'name' => 'class',
                                                            'type' => undef
                                                          }
                                                        ],
                                              'symname' => 'Glib::GET_VERSION_INFO',
                                              'package' => 'Glib',
                                              'deprecated' => '',
                                              'codetype' => 'PPCODE',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '469',
                                              'module' => 'Glib::Utils'
                                            },
                                            {
                                              'pod' => {
                                                         'filename' => 'GUtils.xs',
                                                         'lines' => [
                                                                      '=for apidoc',
                                                                      'Provides a mechanism for checking the version information that Glib was',
                                                                      'compiled against. Essentially equvilent to the macro GLIB_CHECK_VERSION.',
                                                                      '=cut'
                                                                    ],
                                                         'line' => '477'
                                                       },
                                              'gerror' => '',
                                              'return_type' => [
                                                                 'gboolean'
                                                               ],
                                              'function' => '',
                                              'original_name' => 'CHECK_VERSION',
                                              'args' => [
                                                          {
                                                            'name' => 'class',
                                                            'type' => undef
                                                          },
                                                          {
                                                            'name' => 'required_major',
                                                            'type' => 'guint'
                                                          },
                                                          {
                                                            'name' => 'required_minor',
                                                            'type' => 'guint'
                                                          },
                                                          {
                                                            'name' => 'required_micro',
                                                            'type' => 'guint'
                                                          }
                                                        ],
                                              'symname' => 'Glib::CHECK_VERSION',
                                              'package' => 'Glib',
                                              'deprecated' => '',
                                              'codetype' => 'CODE',
                                              'filename' => 'GUtils.xs',
                                              'preprocessor_conditionals' => [],
                                              'hidden' => '',
                                              'line' => '482',
                                              'module' => 'Glib::Utils'
                                            }
                                          ],
                               'pods' => [
                                           {
                                             'filename' => 'GUtils.xs',
                                             'lines' => [
                                                          '=for object Glib::version Library Versioning Utilities',
                                                          '=cut'
                                                        ],
                                             'line' => '281'
                                           },
                                           {
                                             'filename' => 'GUtils.xs',
                                             'position' => 'SYNOPSIS',
                                             'lines' => [
                                                          '=for position SYNOPSIS',
                                                          '',
                                                          '=head1 SYNOPSIS',
                                                          '',
                                                          '  # require at least version 1.021 of the Glib module',
                                                          '  use Glib \'1.021\';',
                                                          '',
                                                          '  # g_set_application_name() was introduced in GLib 2.2.0, and',
                                                          '  # first supported by version 1.040 of the Glib Perl module.',
                                                          '  if ($Glib::VERSION >= 1.040 and Glib->CHECK_VERSION (2,2,0)) {',
                                                          '     Glib::set_application_name (\'My Cool Program\');',
                                                          '  }',
                                                          '',
                                                          '=for position DESCRIPTION',
                                                          '',
                                                          '=head1 DESCRIPTION',
                                                          '',
                                                          'Both the Glib module and the GLib C library are works-in-progress, and ',
                                                          'their interfaces grow over time.  As more features are added to each, ',
                                                          'and your code uses those new features, you will introduce ',
                                                          'version-specific dependencies, and naturally, you\'ll want to be able to ',
                                                          'code around them.  Enter the versioning API.',
                                                          '',
                                                          'For simple Perl modules, a single version number is sufficient; ',
                                                          'however, Glib is a binding to another software library, and this ',
                                                          'introduces some complexity.  We have three versions that fully specify ',
                                                          'the API available to you.',
                                                          '',
                                                          '=over',
                                                          '',
                                                          '=item Perl Bindings Version',
                                                          '',
                                                          'Perl modules use a version number, and Glib is no exception.  ',
                                                          'I<$Glib::VERSION> is the version of the current Glib module.  By ad hoc ',
                                                          'convention, gtk2-perl modules generally use version numbers in the form ',
                                                          'x.yyz, where even yy values denote stable releases and z is a ',
                                                          'patchlevel.',
                                                          '',
                                                          '   $Glib::VERSION',
                                                          '   use Glib 1.040; # require at least version 1.040',
                                                          '',
                                                          '=item Compile-time ("Bound") Library Version',
                                                          '',
                                                          'This is the version of the GLib C library that was available when the ',
                                                          'Perl module was compiled and installed.  These version constants are ',
                                                          'equivalent to the version macros provided in the GLib C headers.  GLib ',
                                                          'uses a major.minor.micro convention, where even minor versions are ',
                                                          'stable.  (gtk2-perl does not officially support unstable versions.)',
                                                          '',
                                                          '   Glib::MAJOR_VERSION',
                                                          '   Glib::MINOR_VERSION',
                                                          '   Glib::MICRO_VERSION',
                                                          '   Glib->CHECK_VERSION($maj,$min,$mic)',
                                                          '',
                                                          '=item Run-time ("Linked") Library Version',
                                                          '',
                                                          'This is the version of the GLib C library that is available at run ',
                                                          'time; it may be newer than the compile-time version, but should never ',
                                                          'be older.  These are equivalent to the version variables exported by ',
                                                          'the GLib C library.',
                                                          '',
                                                          '   Glib::major_version',
                                                          '   Glib::minor_version',
                                                          '   Glib::micro_version',
                                                          '',
                                                          '=back',
                                                          '',
                                                          '=head2 Which one do I use when?',
                                                          '',
                                                          'Where do you use which version?  It depends entirely on what you\'re ',
                                                          'doing.  Let\'s explain by example:',
                                                          '',
                                                          '=over',
                                                          '',
                                                          '=item o Use the Perl module version for bindings support issues',
                                                          '',
                                                          'You need to register a new enum for use as the type of an object ',
                                                          'property.  This is something you can do with all versions of the ',
                                                          'underlying C library, but which wasn\'t supported in the Glib Perl ',
                                                          'module until $Glib::VERSION >= 1.040.',
                                                          '',
                                                          '=item o Use the bound version for library features',
                                                          '',
                                                          'You want to call Glib::set_application_name to set a human-readable name',
                                                          'for your application (which is used by various parts of Gtk2 and Gnome2).',
                                                          'g_set_application_name() (the underlying C function) was added in version',
                                                          '2.2.0 of glib, and support for it was introduced into the Glib Perl module',
                                                          'in Glib version 1.040.  However, you can build the Perl module against any',
                                                          'stable 2.x.x version of glib, so you might not have that function available',
                                                          'even if your Glib module is new enough!',
                                                          '  Thus, you need to check two things to see if the this function is ',
                                                          'available:',
                                                          '',
                                                          '   if ($Glib::VERSION >= 1.040 && Glib->CHECK_VERSION (2,2,0)) {',
                                                          '       # it\'s available, and we can call it!',
                                                          '       Glib::set_application_name (\'My Cool Application\');',
                                                          '   }',
                                                          '',
                                                          'Now what happens if you installed the Perl module when your system had ',
                                                          'glib 2.0.6, and you upgraded glib to 2.4.1?  Wouldn\'t g_set_application_name() ',
                                                          'be available?  Well, it\'s there, under the hood, but the bindings were ',
                                                          'compiled when it wasn\'t there, so you won\'t be able to call it! ',
                                                          'That\'s why we check the "bound" or compile-time version.  By the way, to ',
                                                          'enable support for the new function, you\'d need to reinstall (or upgrade)',
                                                          'the Perl module.',
                                                          '',
                                                          '=item o Use the linked version for runtime work-arounds',
                                                          '',
                                                          'Suppose there\'s a function whose API did not change, but whose ',
                                                          'implementation had a bug in one version that was fixed in another ',
                                                          'version.  To determine whether you need to apply a workaround, you ',
                                                          'would check the version that is actually being used at runtime.',
                                                          '',
                                                          '   if (Glib::major_version == 2 &&',
                                                          '       Glib::minor_version == 2 &&',
                                                          '       Glib::micro_version == 1) {',
                                                          '      # work around bug that exists only in glib 2.2.1.',
                                                          '   }',
                                                          '',
                                                          'In practice, such situations are very rare.',
                                                          '',
                                                          '=back',
                                                          '',
                                                          '=cut'
                                                        ],
                                             'line' => '284'
                                           }
                                         ],
                               'blurb' => ' Library Versioning Utilities'
                             },
          'Glib::Param::Double' => {
                                     'xsubs' => [
                                                  {
                                                    'pod' => {
                                                               'filename' => 'GParamSpec.xs',
                                                               'lines' => [
                                                                            '=for apidoc Glib::Param::Float::get_minimum __hide__',
                                                                            '=cut'
                                                                          ],
                                                               'line' => '1070'
                                                             },
                                                    'gerror' => '',
                                                    'return_type' => [
                                                                       'double'
                                                                     ],
                                                    'function' => '',
                                                    'original_name' => 'get_minimum',
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'line' => '1074',
                                                    'module' => 'Glib::ParamSpec',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Float::get_minimum',
                                                    'codetype' => 'CODE',
                                                    'deprecated' => '',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'hidden' => 1,
                                                    'alias' => {
                                                                 'Glib::Param::Double::get_minimum' => '1'
                                                               }
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [],
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'original_name' => 'get_minimum',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Double::get_minimum',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'alias' => {},
                                                    'module' => 'Glib::ParamSpec',
                                                    'line' => '1074'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'filename' => 'GParamSpec.xs',
                                                               'lines' => [
                                                                            '=for apidoc Glib::Param::Float::get_maximum __hide__',
                                                                            '=cut'
                                                                          ],
                                                               'line' => '1087'
                                                             },
                                                    'gerror' => '',
                                                    'return_type' => [
                                                                       'double'
                                                                     ],
                                                    'function' => '',
                                                    'original_name' => 'get_maximum',
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'line' => '1091',
                                                    'module' => 'Glib::ParamSpec',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Float::get_maximum',
                                                    'codetype' => 'CODE',
                                                    'deprecated' => '',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'hidden' => 1,
                                                    'alias' => {
                                                                 'Glib::Param::Double::get_maximum' => '1'
                                                               }
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [],
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'original_name' => 'get_maximum',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Double::get_maximum',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'alias' => {},
                                                    'module' => 'Glib::ParamSpec',
                                                    'line' => '1091'
                                                  },
                                                  {
                                                    'pod' => {
                                                               'filename' => 'GParamSpec.xs',
                                                               'lines' => [
                                                                            '=for apidoc Glib::Param::Float::get_epsilon __hide__',
                                                                            '=cut'
                                                                          ],
                                                               'line' => '1103'
                                                             },
                                                    'gerror' => '',
                                                    'return_type' => [
                                                                       'double'
                                                                     ],
                                                    'function' => '',
                                                    'original_name' => 'get_epsilon',
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'line' => '1107',
                                                    'module' => 'Glib::ParamSpec',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Float::get_epsilon',
                                                    'codetype' => 'CODE',
                                                    'deprecated' => '',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'hidden' => 1,
                                                    'alias' => {
                                                                 'Glib::Param::Double::get_epsilon' => '1'
                                                               }
                                                  },
                                                  {
                                                    'pod' => {
                                                               'lines' => []
                                                             },
                                                    'return_type' => [],
                                                    'args' => [
                                                                {
                                                                  'name' => 'pspec',
                                                                  'type' => 'GParamSpec *'
                                                                }
                                                              ],
                                                    'original_name' => 'get_epsilon',
                                                    'package' => 'Glib::Param::Float',
                                                    'symname' => 'Glib::Param::Double::get_epsilon',
                                                    'codetype' => 'CODE',
                                                    'filename' => 'GParamSpec.xs',
                                                    'preprocessor_conditionals' => [],
                                                    'alias' => {},
                                                    'module' => 'Glib::ParamSpec',
                                                    'line' => '1107'
                                                  }
                                                ],
                                     'pods' => [
                                                 {
                                                   'filename' => 'GParamSpec.xs',
                                                   'lines' => [
                                                                '=for object Glib::Param::Double',
                                                                '',
                                                                '=for position post_hierarchy',
                                                                '',
                                                                '  Glib::ParamSpec',
                                                                '  +----Glib::Param::Float',
                                                                '',
                                                                '=cut'
                                                              ],
                                                   'line' => '1047'
                                                 },
                                                 {
                                                   'filename' => 'GParamSpec.xs',
                                                   'lines' => [
                                                                '=head1 DESCRIPTION',
                                                                '',
                                                                'This page documents the extra accessors available for both of the',
                                                                'floating-point type paramspecs: Float and Double.  Perl really only supports',
                                                                'doubles, so all of these methods return NVs (that is, the C type "double"); the',
                                                                'distinction of size is important to the underlying C library and also',
                                                                'determines the data value range.',
                                                                '',
                                                                '=cut'
                                                              ],
                                                   'line' => '1056'
                                                 }
                                               ],
                                     'see_alsos' => [
                                                      'Glib::ParamSpec'
                                                    ]
                                   },
          'Glib::Markup' => {
                              'xsubs' => [
                                           {
                                             'pod' => {
                                                        'filename' => 'GUtils.xs',
                                                        'lines' => [
                                                                     '=for apidoc __function__',
                                                                     '=cut'
                                                                   ],
                                                        'line' => '491'
                                                      },
                                             'gerror' => '',
                                             'return_type' => [
                                                                'gchar_own *'
                                                              ],
                                             'function' => 1,
                                             'original_name' => 'g_markup_escape_text',
                                             'args' => [
                                                         {
                                                           'name' => 'text',
                                                           'type' => 'const gchar *'
                                                         }
                                                       ],
                                             'symname' => 'Glib::Markup::escape_text',
                                             'package' => 'Glib::Markup',
                                             'deprecated' => '',
                                             'codetype' => 'CODE',
                                             'filename' => 'GUtils.xs',
                                             'preprocessor_conditionals' => [],
                                             'hidden' => '',
                                             'line' => '494',
                                             'module' => 'Glib::Utils'
                                           }
                                         ],
                              'pods' => []
                            },
          'Glib::Param::Int' => {
                                  'xsubs' => [
                                               {
                                                 'pod' => {
                                                            'filename' => 'GParamSpec.xs',
                                                            'lines' => [
                                                                         '=for apidoc Glib::Param::Char::get_minimum __hide__',
                                                                         '=cut'
                                                                       ],
                                                            'line' => '872'
                                                          },
                                                 'gerror' => '',
                                                 'return_type' => [
                                                                    'IV'
                                                                  ],
                                                 'function' => '',
                                                 'original_name' => 'get_minimum',
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'line' => '879',
                                                 'module' => 'Glib::ParamSpec',
                                                 'package' => 'Glib::Param::Char',
                                                 'symname' => 'Glib::Param::Char::get_minimum',
                                                 'codetype' => 'CODE',
                                                 'deprecated' => '',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'hidden' => 1,
                                                 'alias' => {
                                                              'Glib::Param::Long::get_minimum' => '2',
                                                              'Glib::Param::Int::get_minimum' => '1'
                                                            }
                                               },
                                               {
                                                 'pod' => {
                                                            'lines' => []
                                                          },
                                                 'return_type' => [],
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'original_name' => 'get_minimum',
                                                 'package' => 'Glib::Param::Char',
                                                 'symname' => 'Glib::Param::Int::get_minimum',
                                                 'codetype' => 'CODE',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'alias' => {},
                                                 'module' => 'Glib::ParamSpec',
                                                 'line' => '879'
                                               },
                                               {
                                                 'pod' => {
                                                            'filename' => 'GParamSpec.xs',
                                                            'lines' => [
                                                                         '=for apidoc Glib::Param::Long::get_minimum __hide__',
                                                                         '=cut'
                                                                       ],
                                                            'line' => '875'
                                                          },
                                                 'gerror' => '',
                                                 'return_type' => [],
                                                 'function' => '',
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'original_name' => 'get_minimum',
                                                 'module' => 'Glib::ParamSpec',
                                                 'line' => '879',
                                                 'symname' => 'Glib::Param::Long::get_minimum',
                                                 'package' => 'Glib::Param::Char',
                                                 'codetype' => 'CODE',
                                                 'deprecated' => '',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'hidden' => 1,
                                                 'alias' => {}
                                               },
                                               {
                                                 'pod' => {
                                                            'filename' => 'GParamSpec.xs',
                                                            'lines' => [
                                                                         '=for apidoc Glib::Param::Char::get_maximum __hide__',
                                                                         '=cut'
                                                                       ],
                                                            'line' => '894'
                                                          },
                                                 'gerror' => '',
                                                 'return_type' => [
                                                                    'IV'
                                                                  ],
                                                 'function' => '',
                                                 'original_name' => 'get_maximum',
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'line' => '901',
                                                 'module' => 'Glib::ParamSpec',
                                                 'package' => 'Glib::Param::Char',
                                                 'symname' => 'Glib::Param::Char::get_maximum',
                                                 'codetype' => 'CODE',
                                                 'deprecated' => '',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'hidden' => 1,
                                                 'alias' => {
                                                              'Glib::Param::Long::get_maximum' => '2',
                                                              'Glib::Param::Int::get_maximum' => '1'
                                                            }
                                               },
                                               {
                                                 'pod' => {
                                                            'lines' => []
                                                          },
                                                 'return_type' => [],
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'original_name' => 'get_maximum',
                                                 'package' => 'Glib::Param::Char',
                                                 'symname' => 'Glib::Param::Int::get_maximum',
                                                 'codetype' => 'CODE',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'alias' => {},
                                                 'module' => 'Glib::ParamSpec',
                                                 'line' => '901'
                                               },
                                               {
                                                 'pod' => {
                                                            'filename' => 'GParamSpec.xs',
                                                            'lines' => [
                                                                         '=for apidoc Glib::Param::Long::get_maximum __hide__',
                                                                         '=cut'
                                                                       ],
                                                            'line' => '897'
                                                          },
                                                 'gerror' => '',
                                                 'return_type' => [],
                                                 'function' => '',
                                                 'args' => [
                                                             {
                                                               'name' => 'pspec',
                                                               'type' => 'GParamSpec *'
                                                             }
                                                           ],
                                                 'original_name' => 'get_maximum',
                                                 'module' => 'Glib::ParamSpec',
                                                 'line' => '901',
                                                 'symname' => 'Glib::Param::Long::get_maximum',
                                                 'package' => 'Glib::Param::Char',
                                                 'codetype' => 'CODE',
                                                 'deprecated' => '',
                                                 'filename' => 'GParamSpec.xs',
                                                 'preprocessor_conditionals' => [],
                                                 'hidden' => 1,
                                                 'alias' => {}
                                               }
                                             ],
                                  'pods' => [
                                              {
                                                'filename' => 'GParamSpec.xs',
                                                'lines' => [
                                                             '=for object Glib::Param::Int - Paramspecs for integer types',
                                                             '',
                                                             '=for position post_hierarchy',
                                                             '',
                                                             '  Glib::ParamSpec',
                                                             '  +----Glib::Param::Char',
                                                             '',
                                                             '  Glib::ParamSpec',
                                                             '  +----Glib::Param::Long',
                                                             '',
                                                             '=cut'
                                                           ],
                                                'line' => '847'
                                              },
                                              {
                                                'filename' => 'GParamSpec.xs',
                                                'lines' => [
                                                             '=head1 DESCRIPTION',
                                                             '',
                                                             'This page documents the extra accessors available for all of the integer type',
                                                             'paramspecs: Char, Int, and Long.  Perl really only supports full-size integers,',
                                                             'so all of these methods return IVs; the distinction of integer size is',
                                                             'important to the underlying C library and also determines the data value range.',
                                                             '',
                                                             '=cut'
                                                           ],
                                                'line' => '859'
                                              }
                                            ],
                                  'blurb' => 'Paramspecs for integer types',
                                  'see_alsos' => [
                                                   'Glib::ParamSpec'
                                                 ]
                                },
          'Glib::Param::UInt' => {
                                   'xsubs' => [
                                                {
                                                  'pod' => {
                                                             'filename' => 'GParamSpec.xs',
                                                             'lines' => [
                                                                          '=for apidoc Glib::Param::UChar::get_minimum __hide__',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '946'
                                                           },
                                                  'gerror' => '',
                                                  'return_type' => [
                                                                     'UV'
                                                                   ],
                                                  'function' => '',
                                                  'original_name' => 'get_minimum',
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'line' => '953',
                                                  'module' => 'Glib::ParamSpec',
                                                  'package' => 'Glib::Param::UChar',
                                                  'symname' => 'Glib::Param::UChar::get_minimum',
                                                  'codetype' => 'CODE',
                                                  'deprecated' => '',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'hidden' => 1,
                                                  'alias' => {
                                                               'Glib::Param::UInt::get_minimum' => '1',
                                                               'Glib::Param::ULong::get_minimum' => '2'
                                                             }
                                                },
                                                {
                                                  'pod' => {
                                                             'lines' => []
                                                           },
                                                  'return_type' => [],
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'original_name' => 'get_minimum',
                                                  'package' => 'Glib::Param::UChar',
                                                  'symname' => 'Glib::Param::UInt::get_minimum',
                                                  'codetype' => 'CODE',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'alias' => {},
                                                  'module' => 'Glib::ParamSpec',
                                                  'line' => '953'
                                                },
                                                {
                                                  'pod' => {
                                                             'filename' => 'GParamSpec.xs',
                                                             'lines' => [
                                                                          '=for apidoc Glib::Param::ULong::get_minimum __hide__',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '949'
                                                           },
                                                  'gerror' => '',
                                                  'return_type' => [],
                                                  'function' => '',
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'original_name' => 'get_minimum',
                                                  'module' => 'Glib::ParamSpec',
                                                  'line' => '953',
                                                  'symname' => 'Glib::Param::ULong::get_minimum',
                                                  'package' => 'Glib::Param::UChar',
                                                  'codetype' => 'CODE',
                                                  'deprecated' => '',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'hidden' => 1,
                                                  'alias' => {}
                                                },
                                                {
                                                  'pod' => {
                                                             'filename' => 'GParamSpec.xs',
                                                             'lines' => [
                                                                          '=for apidoc Glib::Param::UChar::get_maximum __hide__',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '968'
                                                           },
                                                  'gerror' => '',
                                                  'return_type' => [
                                                                     'UV'
                                                                   ],
                                                  'function' => '',
                                                  'original_name' => 'get_maximum',
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'line' => '975',
                                                  'module' => 'Glib::ParamSpec',
                                                  'package' => 'Glib::Param::UChar',
                                                  'symname' => 'Glib::Param::UChar::get_maximum',
                                                  'codetype' => 'CODE',
                                                  'deprecated' => '',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'hidden' => 1,
                                                  'alias' => {
                                                               'Glib::Param::ULong::get_maximum' => '2',
                                                               'Glib::Param::UInt::get_maximum' => '1'
                                                             }
                                                },
                                                {
                                                  'pod' => {
                                                             'lines' => []
                                                           },
                                                  'return_type' => [],
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'original_name' => 'get_maximum',
                                                  'package' => 'Glib::Param::UChar',
                                                  'symname' => 'Glib::Param::UInt::get_maximum',
                                                  'codetype' => 'CODE',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'alias' => {},
                                                  'module' => 'Glib::ParamSpec',
                                                  'line' => '975'
                                                },
                                                {
                                                  'pod' => {
                                                             'filename' => 'GParamSpec.xs',
                                                             'lines' => [
                                                                          '=for apidoc Glib::Param::ULong::get_maximum __hide__',
                                                                          '=cut'
                                                                        ],
                                                             'line' => '971'
                                                           },
                                                  'gerror' => '',
                                                  'return_type' => [],
                                                  'function' => '',
                                                  'args' => [
                                                              {
                                                                'name' => 'pspec',
                                                                'type' => 'GParamSpec *'
                                                              }
                                                            ],
                                                  'original_name' => 'get_maximum',
                                                  'module' => 'Glib::ParamSpec',
                                                  'line' => '975',
                                                  'symname' => 'Glib::Param::ULong::get_maximum',
                                                  'package' => 'Glib::Param::UChar',
                                                  'codetype' => 'CODE',
                                                  'deprecated' => '',
                                                  'filename' => 'GParamSpec.xs',
                                                  'preprocessor_conditionals' => [],
                                                  'hidden' => 1,
                                                  'alias' => {}
                                                }
                                              ],
                                   'pods' => [
                                               {
                                                 'filename' => 'GParamSpec.xs',
                                                 'lines' => [
                                                              '=for object Glib::Param::UInt',
                                                              '',
                                                              '=for position post_hierarchy',
                                                              '',
                                                              '  Glib::ParamSpec',
                                                              '  +----Glib::Param::UChar',
                                                              '',
                                                              '  Glib::ParamSpec',
                                                              '  +----Glib::Param::ULong',
                                                              '',
                                                              '=cut'
                                                            ],
                                                 'line' => '920'
                                               },
                                               {
                                                 'filename' => 'GParamSpec.xs',
                                                 'lines' => [
                                                              '=head1 DESCRIPTION',
                                                              '',
                                                              'This page documents the extra accessors available for all of the unsigned',
                                                              'integer type paramspecs: UChar, UInt, and ULong.  Perl really only supports',
                                                              'full-size integers, so all of these methods return UVs; the distinction of',
                                                              'integer size is important to the underlying C library and also determines the',
                                                              'data value range.',
                                                              '',
                                                              '=cut'
                                                            ],
                                                 'line' => '932'
                                               }
                                             ],
                                   'see_alsos' => [
                                                    'Glib::ParamSpec'
                                                  ]
                                 },
          'Glib::Param::GType' => {
                                    'xsubs' => [
                                                 {
                                                   'pod' => {
                                                              'filename' => 'GParamSpec.xs',
                                                              'lines' => [
                                                                           '=for apidoc',
                                                                           'If C<undef>, then any class is allowed.',
                                                                           '=cut'
                                                                         ],
                                                              'line' => '1164'
                                                            },
                                                   'gerror' => '',
                                                   'return_type' => [
                                                                      'const gchar_ornull *'
                                                                    ],
                                                   'function' => '',
                                                   'original_name' => 'get_is_a_type',
                                                   'args' => [
                                                               {
                                                                 'name' => 'pspec_gtype',
                                                                 'type' => 'GParamSpec *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::Param::GType::get_is_a_type',
                                                   'package' => 'Glib::Param::GType',
                                                   'deprecated' => '',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GParamSpec.xs',
                                                   'preprocessor_conditionals' => [
                                                                                    ' GLIB_CHECK_VERSION(2, 10, 0)'
                                                                                  ],
                                                   'hidden' => '',
                                                   'line' => '1168',
                                                   'module' => 'Glib::ParamSpec'
                                                 }
                                               ],
                                    'pods' => [
                                                {
                                                  'filename' => 'GParamSpec.xs',
                                                  'lines' => [
                                                               '=for section DESCRIPTION',
                                                               '',
                                                               '=head1 DESCRIPTION',
                                                               '',
                                                               'This object describes a parameter which holds the name of a class known to the',
                                                               'GLib type system.  The name of the class is considered to be the common',
                                                               'ancestor for valid values.  To create a param that allows any type name,',
                                                               'specify C<undef> for the package name.  Beware, however, that although',
                                                               'we say "any type name", this actually refers to any type registered',
                                                               'with Glib; normal Perl packages will not work.',
                                                               '',
                                                               '=cut'
                                                             ],
                                                  'line' => '1151'
                                                }
                                              ]
                                  },
          'Glib::ParamSpec' => {
                                 'pods' => [
                                             {
                                               'filename' => 'GParamSpec.xs',
                                               'position' => 'DESCRIPTION',
                                               'lines' => [
                                                            '=for position DESCRIPTION',
                                                            '',
                                                            '=head1 DESCRIPTION',
                                                            '',
                                                            'Glib::ParamSpec encapsulates the metadata required to specify parameters.',
                                                            'You will see these most often when creating new Glib::Object types; see',
                                                            'C<< Glib::Type->register >> and L<Glib::Object::Subclass>.',
                                                            '',
                                                            'Parameter specifications allow you to provide limits for validation as ',
                                                            'well as nicknames and blurbs to document the parameters.  Blurbs show up',
                                                            'in reference documentation such as this page or the gtk+ C API reference;',
                                                            'i\'m not really sure where the nicknames get used.  The Perl bindings for',
                                                            'the most part ignore the difference between dashes and underscores in',
                                                            'the paramspec names, which typically find use as the actual keys for ',
                                                            'object parameters.',
                                                            '',
                                                            'It\'s worth noting that Glib offers various sizes of integer and floating',
                                                            'point values, while Perl really only deals with full integers and double',
                                                            'precision floating point values.  The size distinction is important for',
                                                            'the underlying C libraries.',
                                                            '',
                                                            '=cut'
                                                          ],
                                               'line' => '218'
                                             }
                                           ],
                                 'xsubs' => [
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'original_name' => 'DESTROY',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::DESTROY',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '214',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        '',
                                                                        '=signature string = $paramspec->get_name',
                                                                        '',
                                                                        'Dashes in the name are converted to underscores.',
                                                                        '',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '276'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'SV *'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'g_param_spec_get_name',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_name',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'line' => '284',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'const gchar *'
                                                                 ],
                                                'original_name' => 'g_param_spec_get_nick',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_nick',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '295',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'const gchar *'
                                                                 ],
                                                'original_name' => 'g_param_spec_get_blurb',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_blurb',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '297',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'IV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'IV',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {
                                                             'int' => '2',
                                                             'IV' => '0',
                                                             'char' => '1',
                                                             'long' => '3'
                                                           },
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '313'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'IV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'char',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '313'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'IV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'int',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '313'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'IV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'IV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'long',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '313'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_int64',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'gint64'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'gint64'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'gint64'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::int64',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '351',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'UV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'UV',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {
                                                             'ulong' => '3',
                                                             'uint' => '2',
                                                             'uchar' => '1',
                                                             'UV' => '0'
                                                           },
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '366'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'UV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'uchar',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '366'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'UV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'uint',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '366'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'UV'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'UV',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'ulong',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '366'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_uint64',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'guint64'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'guint64'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'guint64'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::uint64',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '404',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_boolean',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'gboolean'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::boolean',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '417',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_unichar',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'gunichar'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::unichar',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '429',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_enum',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'enum_type',
                                                              'type' => 'const char *'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'SV *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::enum',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '435',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_flags',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'flags_type',
                                                              'type' => 'const char *'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'SV *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::flags',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '451',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_double',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::double',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {
                                                             'float' => '1'
                                                           },
                                                'line' => '469',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'minimum',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'maximum',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'double'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'g_param_spec_double',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'float',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '469'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_string',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'default_value',
                                                              'type' => 'const gchar_ornull *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::string',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '497',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        '=for arg package name of the class, derived from Glib::ParamSpec, of the objects this property will hold.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '518'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'param_spec',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'package',
                                                              'type' => 'const char *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'line' => '522',
                                                'module' => 'Glib::ParamSpec',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'Glib::ParamSpec::param_spec',
                                                'codetype' => 'CODE',
                                                'deprecated' => '',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'alias' => {
                                                             'object' => '2',
                                                             'boxed' => '1'
                                                           }
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc boxed',
                                                                        '=for arg package name of the class, derived from Glib::Boxed, of the objects this property will hold.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '514'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [],
                                                'function' => '',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'package',
                                                              'type' => 'const char *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'param_spec',
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '522',
                                                'symname' => 'boxed',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'deprecated' => '',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'alias' => {}
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc object',
                                                                        '=for arg package name of the class, derived from Glib::Object, of the objects this property will hold.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '510'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [],
                                                'function' => '',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'package',
                                                              'type' => 'const char *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'original_name' => 'param_spec',
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '522',
                                                'symname' => 'object',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'deprecated' => '',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'alias' => {}
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        'ParamSpec to be used for any generic perl scalar, including references to',
                                                                        'complex objects.',
                                                                        '',
                                                                        'Currently C<Gtk2::Builder> cannot set object properties of this type',
                                                                        '(there\'s no hooks for property value parsing, as of Gtk 2.20), so',
                                                                        'prefer the builtin types if buildable support for an object matters.',
                                                                        'A C<boxed> of C<Glib::Strv> can give an array of strings.  A signal',
                                                                        'handler callback can do most of what a coderef might.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '556'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'scalar',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::scalar',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'line' => '567',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'original_name' => 'g_param_spec_override',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'overridden',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::override',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [
                                                                                 ' GLIB_CHECK_VERSION(2, 4, 0)'
                                                                               ],
                                                'line' => '589',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamSpec_ornull *'
                                                                 ],
                                                'original_name' => 'g_param_spec_get_redirect_target',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_redirect_target',
                                                'package' => 'Glib::ParamSpec',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [
                                                                                 ' GLIB_CHECK_VERSION(2, 4, 0)'
                                                                               ],
                                                'line' => '596',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        '=for arg is_a_type  The name of a class whose subtypes are allowed as values of the property.  Use C<undef> to allow any type.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '603'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'GParamSpec *'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'g_param_spec_gtype',
                                                'args' => [
                                                            {
                                                              'name' => 'class',
                                                              'type' => undef
                                                            },
                                                            {
                                                              'name' => 'name',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'nick',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'blurb',
                                                              'type' => 'const gchar *'
                                                            },
                                                            {
                                                              'name' => 'is_a_type',
                                                              'type' => 'const gchar_ornull *'
                                                            },
                                                            {
                                                              'name' => 'flags',
                                                              'type' => 'GParamFlags'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::gtype',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [
                                                                                 ' GLIB_CHECK_VERSION(2, 10, 0)'
                                                                               ],
                                                'hidden' => '',
                                                'line' => '607',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'GParamFlags'
                                                                 ],
                                                'original_name' => 'get_flags',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_flags',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'line' => '649',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [
                                                                   'const char *'
                                                                 ],
                                                'original_name' => 'get_value_type',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_value_type',
                                                'package' => 'Glib::ParamSpec',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {
                                                             'get_owner_type' => '1'
                                                           },
                                                'line' => '656',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'lines' => []
                                                         },
                                                'return_type' => [],
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'original_name' => 'get_value_type',
                                                'package' => 'Glib::ParamSpec',
                                                'symname' => 'get_owner_type',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'alias' => {},
                                                'module' => 'Glib::ParamSpec',
                                                'line' => '656'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        '(This is the C level C<g_param_value_set_default> function.)',
                                                                        '',
                                                                        'Note that on a C<Glib::Param::Unichar> the return is a single-char',
                                                                        'string.  This is the same as the constructor',
                                                                        'C<< Glib::ParamSpec->unichar >>, but it\'s not the same as',
                                                                        'C<Glib::Object> C<< get_property >> / C<< set_property >>, so an',
                                                                        'C<ord()> conversion is needed if passing the default value to a',
                                                                        'unichar C<set_property>.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '676'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'SV *'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'get_default_value',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::get_default_value',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'line' => '687',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for apidoc',
                                                                        '=signature bool = $paramspec->value_validate ($value)',
                                                                        '=signature (bool, newval) = $paramspec->value_validate ($value)',
                                                                        'In scalar context return true if $value must be modified to be valid',
                                                                        'for $paramspec, or false if it\'s valid already.  In array context',
                                                                        'return also a new value which is $value made valid.',
                                                                        '',
                                                                        '$value must be the right type for $paramspec (with usual stringizing,',
                                                                        'numizing, etc).  C<value_validate> checks the further restrictions',
                                                                        'such as minimum and maximum for a numeric type or allowed characters',
                                                                        'in a string.  The "made valid" return is then for instance clamped to',
                                                                        'the min/max, or offending chars replaced by a substitutor.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '765'
                                                         },
                                                'gerror' => '',
                                                'function' => '',
                                                'original_name' => 'g_param_value_validate',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            },
                                                            {
                                                              'name' => 'value',
                                                              'type' => 'SV *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::value_validate',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'line' => '779',
                                                'module' => 'Glib::ParamSpec'
                                              },
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for',
                                                                        'Compares I<value1> with I<value2> according to I<pspec>, and returns -1, 0 or',
                                                                        '+1, if value1 is found to be less than, equal to or greater than value2,',
                                                                        'respectively.',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '818'
                                                         },
                                                'gerror' => '',
                                                'return_type' => [
                                                                   'int'
                                                                 ],
                                                'function' => '',
                                                'original_name' => 'g_param_values_cmp',
                                                'args' => [
                                                            {
                                                              'name' => 'pspec',
                                                              'type' => 'GParamSpec *'
                                                            },
                                                            {
                                                              'name' => 'value1',
                                                              'type' => 'SV *'
                                                            },
                                                            {
                                                              'name' => 'value2',
                                                              'type' => 'SV *'
                                                            }
                                                          ],
                                                'symname' => 'Glib::ParamSpec::values_cmp',
                                                'package' => 'Glib::ParamSpec',
                                                'deprecated' => '',
                                                'codetype' => 'CODE',
                                                'filename' => 'GParamSpec.xs',
                                                'preprocessor_conditionals' => [],
                                                'hidden' => '',
                                                'line' => '824',
                                                'module' => 'Glib::ParamSpec'
                                              }
                                            ],
                                 'enums' => [
                                              {
                                                'pod' => {
                                                           'filename' => 'GParamSpec.xs',
                                                           'lines' => [
                                                                        '=for enum Glib::ParamFlags',
                                                                        '=cut'
                                                                      ],
                                                           'line' => '271'
                                                         },
                                                'name' => 'Glib::ParamFlags',
                                                'type' => 'enum'
                                              }
                                            ]
                               },
          'Glib::MainLoop' => {
                                'blurb' => ' An event source manager',
                                'xsubs' => [
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc __function__',
                                                                       'Find the current main loop recursion level.  This is handy in fringe',
                                                                       'situations, but those are very rare; see the C API reference for a more',
                                                                       'in-depth discussion.',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '158'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'int'
                                                                ],
                                               'function' => 1,
                                               'original_name' => 'g_main_depth',
                                               'symname' => 'Glib::main_depth',
                                               'package' => 'Glib',
                                               'deprecated' => '',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [
                                                                                ' GLIB_CHECK_VERSION(2,4,0)'
                                                                              ],
                                               'hidden' => '',
                                               'line' => '164',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'GMainContext *'
                                                                ],
                                               'original_name' => 'g_main_context_new',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::new',
                                               'package' => 'Glib::MainContext',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '215',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'original_name' => 'DESTROY',
                                               'args' => [
                                                           {
                                                             'name' => 'maincontext',
                                                             'type' => 'GMainContext *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::DESTROY',
                                               'package' => 'Glib::MainContext',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '223',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'GMainContext *'
                                                                ],
                                               'original_name' => 'g_main_context_default',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::default',
                                               'package' => 'Glib::MainContext',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '233',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'gboolean'
                                                                ],
                                               'original_name' => 'g_main_context_iteration',
                                               'args' => [
                                                           {
                                                             'name' => 'context',
                                                             'type' => 'GMainContext *'
                                                           },
                                                           {
                                                             'name' => 'may_block',
                                                             'type' => 'gboolean'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::iteration',
                                               'package' => 'Glib::MainContext',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '238',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'gboolean'
                                                                ],
                                               'original_name' => 'g_main_context_pending',
                                               'args' => [
                                                           {
                                                             'name' => 'context',
                                                             'type' => 'GMainContext *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::pending',
                                               'package' => 'Glib::MainContext',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '240',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'gboolean'
                                                                ],
                                               'original_name' => 'g_main_context_is_owner',
                                               'args' => [
                                                           {
                                                             'name' => 'context',
                                                             'type' => 'GMainContext *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainContext::is_owner',
                                               'package' => 'Glib::MainContext',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [
                                                                                ' GLIB_CHECK_VERSION (2, 12, 0)'
                                                                              ],
                                               'line' => '287',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'GMainLoop *'
                                                                ],
                                               'original_name' => 'g_main_loop_new',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'context',
                                                             'default' => 'NULL',
                                                             'type' => 'GMainContext *'
                                                           },
                                                           {
                                                             'name' => 'is_running',
                                                             'default' => 'FALSE',
                                                             'type' => 'gboolean'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::new',
                                               'package' => 'Glib::MainLoop',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '304',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'original_name' => 'DESTROY',
                                               'args' => [
                                                           {
                                                             'name' => 'mainloop',
                                                             'type' => 'GMainLoop *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::DESTROY',
                                               'package' => 'Glib::MainLoop',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '313',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'original_name' => 'g_main_loop_run',
                                               'args' => [
                                                           {
                                                             'name' => 'loop',
                                                             'type' => 'GMainLoop *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::run',
                                               'package' => 'Glib::MainLoop',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '319',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'original_name' => 'g_main_loop_quit',
                                               'args' => [
                                                           {
                                                             'name' => 'loop',
                                                             'type' => 'GMainLoop *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::quit',
                                               'package' => 'Glib::MainLoop',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '321',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'gboolean'
                                                                ],
                                               'original_name' => 'g_main_loop_is_running',
                                               'args' => [
                                                           {
                                                             'name' => 'loop',
                                                             'type' => 'GMainLoop *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::is_running',
                                               'package' => 'Glib::MainLoop',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '327',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'GMainContext *'
                                                                ],
                                               'original_name' => 'g_main_loop_get_context',
                                               'args' => [
                                                           {
                                                             'name' => 'loop',
                                                             'type' => 'GMainLoop *'
                                                           }
                                                         ],
                                               'symname' => 'Glib::MainLoop::get_context',
                                               'package' => 'Glib::MainLoop',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'line' => '329',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc',
                                                                       '',
                                                                       'Remove an event source.  I<$tag> is the number returned by things like',
                                                                       'C<< Glib::Timeout->add >>, C<< Glib::Idle->add >>, and',
                                                                       'C<< Glib::IO->add_watch >>.',
                                                                       '',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '403'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'gboolean'
                                                                ],
                                               'function' => '',
                                               'original_name' => 'g_source_remove',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'tag',
                                                             'type' => 'guint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::Source::remove',
                                               'package' => 'Glib::Source',
                                               'deprecated' => '',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'hidden' => '',
                                               'line' => '411',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc',
                                                                       '=for arg interval number of milliseconds',
                                                                       '=for arg callback (subroutine)',
                                                                       '',
                                                                       'Run I<$callback> every I<$interval> milliseconds until I<$callback> returns',
                                                                       'false.  Returns a source id which may be used with C<< Glib::Source->remove >>.',
                                                                       'Note that a mainloop must be active for the timeout to execute.',
                                                                       '',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '430'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'guint'
                                                                ],
                                               'function' => '',
                                               'original_name' => 'g_timeout_add',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'interval',
                                                             'type' => 'guint'
                                                           },
                                                           {
                                                             'name' => 'callback',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'data',
                                                             'default' => 'NULL',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'priority',
                                                             'default' => 'G_PRIORITY_DEFAULT',
                                                             'type' => 'gint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::Timeout::add',
                                               'package' => 'Glib::Timeout',
                                               'deprecated' => '',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'hidden' => '',
                                               'line' => '440',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'lines' => []
                                                        },
                                               'return_type' => [
                                                                  'guint'
                                                                ],
                                               'original_name' => 'g_timeout_add_seconds',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'interval',
                                                             'type' => 'guint'
                                                           },
                                                           {
                                                             'name' => 'callback',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'data',
                                                             'default' => 'NULL',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'priority',
                                                             'default' => 'G_PRIORITY_DEFAULT',
                                                             'type' => 'gint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::Timeout::add_seconds',
                                               'package' => 'Glib::Timeout',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [
                                                                                ' GLIB_CHECK_VERSION (2, 14, 0)'
                                                                              ],
                                               'line' => '462',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc',
                                                                       '=for arg callback (subroutine)',
                                                                       '',
                                                                       'Run I<$callback> when the mainloop is idle.  If I<$callback> returns false,',
                                                                       'it will uninstall itself, otherwise, it will run again at the next idle',
                                                                       'iteration.  Returns a source id which may be used with',
                                                                       'C<< Glib::Source->remove >>.',
                                                                       '',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '484'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'guint'
                                                                ],
                                               'function' => '',
                                               'original_name' => 'g_idle_add',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'callback',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'data',
                                                             'default' => 'NULL',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'priority',
                                                             'default' => 'G_PRIORITY_DEFAULT_IDLE',
                                                             'type' => 'gint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::Idle::add',
                                               'package' => 'Glib::Idle',
                                               'deprecated' => '',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'hidden' => '',
                                               'line' => '494',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc',
                                                                       '=for arg fd (integer) file descriptor, e.g. fileno($filehandle)',
                                                                       '=for arg callback (subroutine)',
                                                                       '',
                                                                       'Run I<$callback> when there is an event on I<$fd> that matches I<$condition>.',
                                                                       'The watch uninstalls itself if I<$callback> returns false.',
                                                                       'Returns a source id that may be used with C<< Glib::Source->remove >>.',
                                                                       '',
                                                                       'Glib\'s IO channels serve the same basic purpose as Perl\'s file handles, so',
                                                                       'for the most part you don\'t see GIOChannels in Perl.  The IO watch integrates',
                                                                       'IO operations with the main loop, which Perl file handles don\'t do.  For',
                                                                       'various reasons, this function requires raw file descriptors, not full',
                                                                       'file handles.  See C<fileno> in L<perlfunc>.',
                                                                       '',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '526'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'guint'
                                                                ],
                                               'function' => '',
                                               'original_name' => 'g_io_add_watch',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'fd',
                                                             'type' => 'int'
                                                           },
                                                           {
                                                             'name' => 'condition',
                                                             'type' => 'GIOCondition'
                                                           },
                                                           {
                                                             'name' => 'callback',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'data',
                                                             'default' => 'NULL',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'priority',
                                                             'default' => 'G_PRIORITY_DEFAULT',
                                                             'type' => 'gint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::IO::add_watch',
                                               'package' => 'Glib::IO',
                                               'deprecated' => '',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [],
                                               'hidden' => '',
                                               'line' => '542',
                                               'module' => 'Glib::MainLoop'
                                             },
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for apidoc',
                                                                       '=for arg pid (integer) child process ID',
                                                                       '=for arg callback (subroutine)',
                                                                       '',
                                                                       'Add a source to the default main context which will call',
                                                                       '',
                                                                       '    &$callback ($pid, $waitstatus, $data)',
                                                                       '',
                                                                       'when child process $pid terminates.  The return value is a source id',
                                                                       'which can be used with C<< Glib::Source->remove >>.  When the callback',
                                                                       'is made the source is removed automatically.',
                                                                       '',
                                                                       'In a non-threaded program Glib implements this source by installing a',
                                                                       'SIGCHLD handler.  Don\'t change $SIG{CHLD} in Perl or the callback will',
                                                                       'never run.',
                                                                       '',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '578'
                                                        },
                                               'gerror' => '',
                                               'return_type' => [
                                                                  'guint'
                                                                ],
                                               'function' => '',
                                               'original_name' => 'g_child_watch_add',
                                               'args' => [
                                                           {
                                                             'name' => 'class',
                                                             'type' => undef
                                                           },
                                                           {
                                                             'name' => 'pid',
                                                             'type' => 'int'
                                                           },
                                                           {
                                                             'name' => 'callback',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'data',
                                                             'default' => 'NULL',
                                                             'type' => 'SV *'
                                                           },
                                                           {
                                                             'name' => 'priority',
                                                             'default' => 'G_PRIORITY_DEFAULT',
                                                             'type' => 'gint'
                                                           }
                                                         ],
                                               'symname' => 'Glib::Child::watch_add',
                                               'package' => 'Glib::Child',
                                               'deprecated' => '',
                                               'codetype' => 'CODE',
                                               'filename' => 'GMainLoop.xs',
                                               'preprocessor_conditionals' => [
                                                                                ' GLIB_CHECK_VERSION (2, 4, 0)'
                                                                              ],
                                               'hidden' => '',
                                               'line' => '596',
                                               'module' => 'Glib::MainLoop'
                                             }
                                           ],
                                'pods' => [
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '153'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop An event source manager',
                                                           '=cut'
                                                         ],
                                              'line' => '169'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'position' => 'DESCRIPTION',
                                              'lines' => [
                                                           '=for position DESCRIPTION',
                                                           '',
                                                           '=head1 DESCRIPTION',
                                                           '',
                                                           'Event-driven programs need some sort of loop which watches for events and',
                                                           'launches the appropriate actions.  Glib::MainLoop provides this functionality.',
                                                           '',
                                                           'Mainloops have context, provided by the MainContext object.  For the most part',
                                                           'you can use the default context (see C<default>), but if you want to create a',
                                                           'subcontext for a nested loop which doesn\'t have the same event sources, etc,',
                                                           'you can.',
                                                           '',
                                                           'Event sources, attached to main contexts, watch for events to happen, and',
                                                           'launch appropriate actions.  Glib provides a few ready-made event sources,',
                                                           'the Glib::Timeout, Glib::Idle, and io watch (C<< Glib::IO->add_watch >>).',
                                                           '',
                                                           'Under the hood, Gtk+ adds event sources for GdkEvents to dispatch events to',
                                                           'your widgets.  In fact, Gtk2 provides an abstraction of Glib::MainLoop (See',
                                                           'C<< Gtk2->main >> and friends), so you may rarely have cause to use',
                                                           'Glib::MainLoop directly.',
                                                           '',
                                                           'Note: As of version 1.080, the Glib module uses a custom event source to',
                                                           'ensure that perl\'s safe signal handling and the glib polling event loop',
                                                           'play nicely together.  It is no longer necessary to install a timeout to',
                                                           'ensure that async signals get handled in a timely manner.',
                                                           '',
                                                           '=head1 CONSTANTS',
                                                           '',
                                                           'C<SOURCE_REMOVE> and C<SOURCE_CONTINUE> are designed for use as the',
                                                           'return values from timeout, idle and I/O watch source functions.  They',
                                                           'return true to keep running or false to remove themselves.  These',
                                                           'constants can help you get that the right way around.',
                                                           '',
                                                           '    Glib::SOURCE_CONTINUE     # true',
                                                           '    Glib::SOURCE_REMOVE       # false',
                                                           '',
                                                           '=cut'
                                                         ],
                                              'line' => '172'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '357'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '423'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '481'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '517'
                                            },
                                            {
                                              'filename' => 'GMainLoop.xs',
                                              'lines' => [
                                                           '=for object Glib::MainLoop',
                                                           '=cut'
                                                         ],
                                              'line' => '573'
                                            }
                                          ],
                                'enums' => [
                                             {
                                               'pod' => {
                                                          'filename' => 'GMainLoop.xs',
                                                          'lines' => [
                                                                       '=for enum Glib::IOCondition',
                                                                       '=cut'
                                                                     ],
                                                          'line' => '523'
                                                        },
                                               'name' => 'Glib::IOCondition',
                                               'type' => 'enum'
                                             }
                                           ]
                              },
          'Glib::Param::Flags' => {
                                    'pods' => [],
                                    'xsubs' => [
                                                 {
                                                   'pod' => {
                                                              'lines' => []
                                                            },
                                                   'return_type' => [
                                                                      'const char *'
                                                                    ],
                                                   'original_name' => 'get_flags_class',
                                                   'args' => [
                                                               {
                                                                 'name' => 'pspec_flags',
                                                                 'type' => 'GParamSpec *'
                                                               }
                                                             ],
                                                   'symname' => 'Glib::Param::Flags::get_flags_class',
                                                   'package' => 'Glib::Param::Flags',
                                                   'codetype' => 'CODE',
                                                   'filename' => 'GParamSpec.xs',
                                                   'preprocessor_conditionals' => [],
                                                   'line' => '1139',
                                                   'module' => 'Glib::ParamSpec'
                                                 }
                                               ],
                                    'see_alsos' => [
                                                     'Glib::ParamSpec'
                                                   ]
                                  },
          'Glib::Log' => {
                           'xsubs' => [
                                        {
                                          'pod' => {
                                                     'filename' => 'GLog.xs',
                                                     'lines' => [
                                                                  '=for apidoc',
                                                                  '',
                                                                  '=for arg log_domain name of the domain to handle with this callback.',
                                                                  '',
                                                                  '=arg log_levels (GLogLevelFlags) log levels to handle with this callback',
                                                                  '',
                                                                  '=arg log_func (subroutine) handler function',
                                                                  '',
                                                                  '$log_func will be called as',
                                                                  '',
                                                                  '    &$log_func ($log_domain, $log_levels, $message, $user_data);',
                                                                  '',
                                                                  'where $log_domain is the name requested and $log_levels is a',
                                                                  'Glib::LogLevelFlags of level and flags being reported.',
                                                                  '=cut'
                                                                ],
                                                     'line' => '203'
                                                   },
                                          'gerror' => '',
                                          'return_type' => [
                                                             'guint'
                                                           ],
                                          'function' => '',
                                          'original_name' => 'g_log_set_handler',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'log_domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'log_levels',
                                                        'type' => 'SV *'
                                                      },
                                                      {
                                                        'name' => 'log_func',
                                                        'type' => 'SV *'
                                                      },
                                                      {
                                                        'name' => 'user_data',
                                                        'default' => 'NULL',
                                                        'type' => 'SV *'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::set_handler',
                                          'package' => 'Glib::Log',
                                          'deprecated' => '',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'hidden' => '',
                                          'line' => '219',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'filename' => 'GLog.xs',
                                                     'lines' => [
                                                                  '=for apidoc',
                                                                  '=for arg handler_id as returned by C<set_handler>',
                                                                  '=cut'
                                                                ],
                                                     'line' => '235'
                                                   },
                                          'gerror' => '',
                                          'function' => '',
                                          'original_name' => 'g_log_remove_handler',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'log_domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'handler_id',
                                                        'type' => 'guint'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::remove_handler',
                                          'package' => 'Glib::Log',
                                          'deprecated' => '',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'hidden' => '',
                                          'line' => '239',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'filename' => 'GLog.xs',
                                                     'lines' => [
                                                                  '=for apidoc __function__',
                                                                  '=for signature Glib::Log::default_handler ($log_domain, $log_level, $message, ...)',
                                                                  '=for arg ... possible "userdata" argument ignored',
                                                                  'The arguments are the same as taken by the function for set_handler or',
                                                                  'set_default_handler.',
                                                                  '=cut'
                                                                ],
                                                     'line' => '243'
                                                   },
                                          'gerror' => '',
                                          'function' => 1,
                                          'original_name' => 'g_log_default_handler',
                                          'args' => [
                                                      {
                                                        'name' => 'log_domain',
                                                        'type' => 'const gchar *'
                                                      },
                                                      {
                                                        'name' => 'log_level',
                                                        'type' => 'SV *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      },
                                                      {
                                                        'name' => '...'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::default_handler',
                                          'package' => 'Glib::Log',
                                          'deprecated' => '',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'hidden' => '',
                                          'line' => '250',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'filename' => 'GLog.xs',
                                                     'lines' => [
                                                                  '=for apidoc',
                                                                  '=for signature prev_log_func = Glib->set_default_handler ($log_func, $user_data)',
                                                                  '=arg log_func (subroutine) handler function or undef',
                                                                  'Install log_func as the default log handler.  log_func is called for',
                                                                  'anything which doesn\'t otherwise have a handler (either',
                                                                  'Glib::Log->set_handler, or the L<Glib::xsapi|Glib::xsapi>',
                                                                  'gperl_handle_logs_for),',
                                                                  '',
                                                                  '    &$log_func ($log_domain, $log_levels, $message, $user_data)',
                                                                  '',
                                                                  'where $log_domain is a string, and $log_levels is a',
                                                                  'Glib::LogLevelFlags of level and flags being reported.',
                                                                  '',
                                                                  'If log_func is \\&Glib::Log::default_handler or undef then Glib\'s',
                                                                  'default handler is set.',
                                                                  '',
                                                                  'The return value from C<set_default_handler> is the previous handler.',
                                                                  'This is \\&Glib::Log::default_handler for Glib\'s default, otherwise a',
                                                                  'Perl function previously installed.  If the handler is some other',
                                                                  'non-Perl function then currently the return is undef, but perhaps that',
                                                                  'will change to some wrapped thing, except that without associated',
                                                                  'userdata there\'s very little which could be done with it (it couldn\'t',
                                                                  'be reinstalled later without its userdata).',
                                                                  '=cut'
                                                                ],
                                                     'line' => '257'
                                                   },
                                          'gerror' => '',
                                          'return_type' => [
                                                             'SV *'
                                                           ],
                                          'function' => '',
                                          'original_name' => 'g_log_set_default_handler',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'log_func',
                                                        'type' => 'SV *'
                                                      },
                                                      {
                                                        'name' => 'user_data',
                                                        'default' => 'NULL',
                                                        'type' => 'SV *'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::set_default_handler',
                                          'package' => 'Glib::Log',
                                          'deprecated' => '',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [
                                                                           ' GLIB_CHECK_VERSION (2, 6, 0)'
                                                                         ],
                                          'hidden' => '',
                                          'line' => '282',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'original_name' => 'g_log',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'log_domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'log_level',
                                                        'type' => 'SV *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      }
                                                    ],
                                          'symname' => 'Glib::log',
                                          'package' => 'Glib',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'line' => '346',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'return_type' => [
                                                             'SV *'
                                                           ],
                                          'original_name' => 'g_log_set_fatal_mask',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'log_domain',
                                                        'type' => 'const gchar *'
                                                      },
                                                      {
                                                        'name' => 'fatal_mask',
                                                        'type' => 'SV *'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::set_fatal_mask',
                                          'package' => 'Glib::Log',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'line' => '352',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'return_type' => [
                                                             'SV *'
                                                           ],
                                          'original_name' => 'g_log_set_always_fatal',
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'fatal_mask',
                                                        'type' => 'SV *'
                                                      }
                                                    ],
                                          'symname' => 'Glib::Log::set_always_fatal',
                                          'package' => 'Glib::Log',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'line' => '360',
                                          'module' => 'Glib::Log'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      }
                                                    ],
                                          'original_name' => 'error',
                                          'package' => 'Glib',
                                          'symname' => 'error',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'alias' => {
                                                       'critical' => '2',
                                                       'warning' => '3',
                                                       'error' => '0',
                                                       'message' => '1'
                                                     },
                                          'module' => 'Glib::Log',
                                          'line' => '389'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      }
                                                    ],
                                          'original_name' => 'error',
                                          'package' => 'Glib',
                                          'symname' => 'message',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'alias' => {},
                                          'module' => 'Glib::Log',
                                          'line' => '389'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      }
                                                    ],
                                          'original_name' => 'error',
                                          'package' => 'Glib',
                                          'symname' => 'critical',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'alias' => {},
                                          'module' => 'Glib::Log',
                                          'line' => '389'
                                        },
                                        {
                                          'pod' => {
                                                     'lines' => []
                                                   },
                                          'args' => [
                                                      {
                                                        'name' => 'class',
                                                        'type' => undef
                                                      },
                                                      {
                                                        'name' => 'domain',
                                                        'type' => 'gchar_ornull *'
                                                      },
                                                      {
                                                        'name' => 'message',
                                                        'type' => 'const gchar *'
                                                      }
                                                    ],
                                          'original_name' => 'error',
                                          'package' => 'Glib',
                                          'symname' => 'warning',
                                          'codetype' => 'CODE',
                                          'filename' => 'GLog.xs',
                                          'preprocessor_conditionals' => [],
                                          'alias' => {},
                                          'module' => 'Glib::Log',
                                          'line' => '389'
                                        }
                                      ],
                           'pods' => [
                                       {
                                         'filename' => 'GLog.xs',
                                         'lines' => [
                                                      '=for object Glib::Log A flexible logging mechanism',
                                                      '=cut'
                                                    ],
                                         'line' => '185'
                                       },
                                       {
                                         'filename' => 'GLog.xs',
                                         'lines' => [
                                                      '=for object Glib::Log',
                                                      '=cut'
                                                    ],
                                         'line' => '342'
                                       },
                                       {
                                         'filename' => 'GLog.xs',
                                         'lines' => [
                                                      '=for object Glib::Log',
                                                      '=cut'
                                                    ],
                                         'line' => '378'
                                       }
                                     ],
                           'blurb' => ' A flexible logging mechanism',
                           'enums' => [
                                        {
                                          'pod' => {
                                                     'filename' => 'GLog.xs',
                                                     'lines' => [
                                                                  '=for flags Glib::LogLevelFlags',
                                                                  '=cut'
                                                                ],
                                                     'line' => '196'
                                                   },
                                          'name' => 'Glib::LogLevelFlags',
                                          'type' => 'flags'
                                        }
                                      ]
                         },
          'Glib::Boxed' => {
                             'xsubs' => [
                                          {
                                            'pod' => {
                                                       'filename' => 'GBoxed.xs',
                                                       'lines' => [
                                                                    '=for apidoc',
                                                                    '=for signature copy_of_boxed = $boxed->copy',
                                                                    'Create and return a new copy of I<$boxed>.',
                                                                    '=cut'
                                                                  ],
                                                       'line' => '828'
                                                     },
                                            'gerror' => '',
                                            'return_type' => [
                                                               'SV *'
                                                             ],
                                            'function' => '',
                                            'original_name' => 'copy',
                                            'args' => [
                                                        {
                                                          'name' => 'sv',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Boxed::copy',
                                            'package' => 'Glib::Boxed',
                                            'deprecated' => '',
                                            'codetype' => 'CODE',
                                            'filename' => 'GBoxed.xs',
                                            'preprocessor_conditionals' => [],
                                            'hidden' => '',
                                            'line' => '833',
                                            'module' => 'Glib::Boxed'
                                          },
                                          {
                                            'pod' => {
                                                       'lines' => []
                                                     },
                                            'original_name' => 'DESTROY',
                                            'args' => [
                                                        {
                                                          'name' => 'sv',
                                                          'type' => 'SV *'
                                                        }
                                                      ],
                                            'symname' => 'Glib::Boxed::DESTROY',
                                            'package' => 'Glib::Boxed',
                                            'codetype' => 'CODE',
                                            'filename' => 'GBoxed.xs',
                                            'preprocessor_conditionals' => [],
                                            'line' => '874',
                                            'module' => 'Glib::Boxed'
                                          }
                                        ],
                             'pods' => [
                                         {
                                           'filename' => 'GBoxed.xs',
                                           'lines' => [
                                                        '=for object Glib::Boxed Generic wrappers for C structures',
                                                        '=cut'
                                                      ],
                                           'line' => '814'
                                         },
                                         {
                                           'filename' => 'GBoxed.xs',
                                           'position' => 'DESCRIPTION',
                                           'lines' => [
                                                        '=for position DESCRIPTION',
                                                        '',
                                                        '=head1 DESCRIPTION',
                                                        '',
                                                        'Glib::Boxed is a generic wrapper mechanism for arbitrary C structures.',
                                                        'For the most part you don\'t care about this as a Perl developer, but it',
                                                        'is important to know that all Glib::Boxed descendents can be copied with',
                                                        'the C<copy> method.',
                                                        '',
                                                        '=cut'
                                                      ],
                                           'line' => '817'
                                         }
                                       ],
                             'blurb' => ' Generic wrappers for C structures'
                           }
        };
$data->{'Glib::Utils'}{'xsubs'}[1]{'return_type'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Utils'}{'xsubs'}[1]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[1]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[2]{'return_type'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Utils'}{'xsubs'}[2]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[2]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[3]{'return_type'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Utils'}{'xsubs'}[3]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[3]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::Utils'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[6]{'return_type'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::Utils'}{'xsubs'}[6]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[6]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[4]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[8]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[7]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[8]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[7]{'alias'};
$data->{'Glib::Utils'}{'xsubs'}[9]{'preprocessor_conditionals'} = $data->{'Glib::Utils'}{'xsubs'}[7]{'preprocessor_conditionals'};
$data->{'Glib::Utils'}{'xsubs'}[9]{'alias'} = $data->{'Glib::Utils'}{'xsubs'}[7]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[4]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[7]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[6]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[7]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[6]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[12]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[11]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[12]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[11]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[25]{'return_type'} = $data->{'Glib::Object'}{'xsubs'}[24]{'return_type'};
$data->{'Glib::Object'}{'xsubs'}[25]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[24]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[25]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[24]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[26]{'return_type'} = $data->{'Glib::Object'}{'xsubs'}[24]{'return_type'};
$data->{'Glib::Object'}{'xsubs'}[26]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[24]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[26]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[24]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[32]{'return_type'} = $data->{'Glib::Object'}{'xsubs'}[31]{'return_type'};
$data->{'Glib::Object'}{'xsubs'}[32]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[31]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[32]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[31]{'alias'};
$data->{'Glib::Object'}{'xsubs'}[33]{'return_type'} = $data->{'Glib::Object'}{'xsubs'}[31]{'return_type'};
$data->{'Glib::Object'}{'xsubs'}[33]{'preprocessor_conditionals'} = $data->{'Glib::Object'}{'xsubs'}[31]{'preprocessor_conditionals'};
$data->{'Glib::Object'}{'xsubs'}[33]{'alias'} = $data->{'Glib::Object'}{'xsubs'}[31]{'alias'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[34]{'return_type'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'return_type'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[34]{'preprocessor_conditionals'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'preprocessor_conditionals'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[34]{'alias'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'alias'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[35]{'return_type'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'return_type'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[35]{'preprocessor_conditionals'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'preprocessor_conditionals'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[35]{'alias'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[33]{'alias'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[37]{'preprocessor_conditionals'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[36]{'preprocessor_conditionals'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[37]{'alias'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[36]{'alias'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[38]{'preprocessor_conditionals'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[36]{'preprocessor_conditionals'};
$data->{'Glib::BookmarkFile'}{'xsubs'}[38]{'alias'} = $data->{'Glib::BookmarkFile'}{'xsubs'}[36]{'alias'};
$data->{'Glib::Error'}{'xsubs'}[6]{'return_type'} = $data->{'Glib::Error'}{'xsubs'}[5]{'return_type'};
$data->{'Glib::Error'}{'xsubs'}[6]{'preprocessor_conditionals'} = $data->{'Glib::Error'}{'xsubs'}[5]{'preprocessor_conditionals'};
$data->{'Glib::Error'}{'xsubs'}[6]{'alias'} = $data->{'Glib::Error'}{'xsubs'}[5]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[16]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[15]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[16]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[15]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[17]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[15]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[17]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[15]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[20]{'return_type'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'return_type'};
$data->{'Glib::KeyFile'}{'xsubs'}[20]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[20]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[21]{'return_type'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'return_type'};
$data->{'Glib::KeyFile'}{'xsubs'}[21]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[21]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[19]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[28]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[27]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[28]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[27]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[29]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[27]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[29]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[27]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[32]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[31]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[32]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[31]{'alias'};
$data->{'Glib::KeyFile'}{'xsubs'}[33]{'preprocessor_conditionals'} = $data->{'Glib::KeyFile'}{'xsubs'}[31]{'preprocessor_conditionals'};
$data->{'Glib::KeyFile'}{'xsubs'}[33]{'alias'} = $data->{'Glib::KeyFile'}{'xsubs'}[31]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[4]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[4]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[4]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[3]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[7]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[7]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[7]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[8]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[8]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[8]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[9]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[9]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[9]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'alias'};
$data->{'Glib::Flags'}{'xsubs'}[10]{'return_type'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'return_type'};
$data->{'Glib::Flags'}{'xsubs'}[10]{'preprocessor_conditionals'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'preprocessor_conditionals'};
$data->{'Glib::Flags'}{'xsubs'}[10]{'alias'} = $data->{'Glib::Flags'}{'xsubs'}[6]{'alias'};
$data->{'Glib::version'}{'xsubs'}[1]{'return_type'} = $data->{'Glib::version'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::version'}{'xsubs'}[1]{'preprocessor_conditionals'} = $data->{'Glib::version'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::version'}{'xsubs'}[1]{'alias'} = $data->{'Glib::version'}{'xsubs'}[0]{'alias'};
$data->{'Glib::version'}{'xsubs'}[2]{'return_type'} = $data->{'Glib::version'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::version'}{'xsubs'}[2]{'preprocessor_conditionals'} = $data->{'Glib::version'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::version'}{'xsubs'}[2]{'alias'} = $data->{'Glib::version'}{'xsubs'}[0]{'alias'};
$data->{'Glib::version'}{'xsubs'}[3]{'return_type'} = $data->{'Glib::version'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::version'}{'xsubs'}[3]{'preprocessor_conditionals'} = $data->{'Glib::version'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::version'}{'xsubs'}[3]{'alias'} = $data->{'Glib::version'}{'xsubs'}[0]{'alias'};
$data->{'Glib::version'}{'xsubs'}[4]{'return_type'} = $data->{'Glib::version'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::version'}{'xsubs'}[4]{'preprocessor_conditionals'} = $data->{'Glib::version'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::version'}{'xsubs'}[4]{'alias'} = $data->{'Glib::version'}{'xsubs'}[0]{'alias'};
$data->{'Glib::version'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::version'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::version'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::version'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::version'}{'xsubs'}[5]{'alias'} = $data->{'Glib::version'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::Double'}{'xsubs'}[1]{'return_type'} = $data->{'Glib::Param::Double'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Param::Double'}{'xsubs'}[1]{'preprocessor_conditionals'} = $data->{'Glib::Param::Double'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Param::Double'}{'xsubs'}[1]{'alias'} = $data->{'Glib::Param::Double'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::Double'}{'xsubs'}[3]{'return_type'} = $data->{'Glib::Param::Double'}{'xsubs'}[2]{'return_type'};
$data->{'Glib::Param::Double'}{'xsubs'}[3]{'preprocessor_conditionals'} = $data->{'Glib::Param::Double'}{'xsubs'}[2]{'preprocessor_conditionals'};
$data->{'Glib::Param::Double'}{'xsubs'}[3]{'alias'} = $data->{'Glib::Param::Double'}{'xsubs'}[2]{'alias'};
$data->{'Glib::Param::Double'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::Param::Double'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::Param::Double'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Param::Double'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::Param::Double'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Param::Double'}{'xsubs'}[4]{'alias'};
$data->{'Glib::Param::Int'}{'xsubs'}[1]{'return_type'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Param::Int'}{'xsubs'}[1]{'preprocessor_conditionals'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Param::Int'}{'xsubs'}[1]{'alias'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::Int'}{'xsubs'}[2]{'return_type'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Param::Int'}{'xsubs'}[2]{'preprocessor_conditionals'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Param::Int'}{'xsubs'}[2]{'alias'} = $data->{'Glib::Param::Int'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::Int'}{'xsubs'}[4]{'return_type'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Param::Int'}{'xsubs'}[4]{'preprocessor_conditionals'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Param::Int'}{'xsubs'}[4]{'alias'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'alias'};
$data->{'Glib::Param::Int'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Param::Int'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Param::Int'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Param::Int'}{'xsubs'}[3]{'alias'};
$data->{'Glib::Param::UInt'}{'xsubs'}[1]{'return_type'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Param::UInt'}{'xsubs'}[1]{'preprocessor_conditionals'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Param::UInt'}{'xsubs'}[1]{'alias'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::UInt'}{'xsubs'}[2]{'return_type'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'return_type'};
$data->{'Glib::Param::UInt'}{'xsubs'}[2]{'preprocessor_conditionals'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'preprocessor_conditionals'};
$data->{'Glib::Param::UInt'}{'xsubs'}[2]{'alias'} = $data->{'Glib::Param::UInt'}{'xsubs'}[0]{'alias'};
$data->{'Glib::Param::UInt'}{'xsubs'}[4]{'return_type'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Param::UInt'}{'xsubs'}[4]{'preprocessor_conditionals'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Param::UInt'}{'xsubs'}[4]{'alias'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'alias'};
$data->{'Glib::Param::UInt'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'return_type'};
$data->{'Glib::Param::UInt'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'preprocessor_conditionals'};
$data->{'Glib::Param::UInt'}{'xsubs'}[5]{'alias'} = $data->{'Glib::Param::UInt'}{'xsubs'}[3]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[5]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[5]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[5]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[6]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[6]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[6]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[7]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[7]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[7]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[4]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[10]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[10]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[10]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[11]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[11]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[11]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[12]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[12]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[12]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[9]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[19]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[18]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[19]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[18]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[19]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[18]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[22]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[22]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[22]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[23]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[23]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[23]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[21]{'alias'};
$data->{'Glib::ParamSpec'}{'xsubs'}[30]{'return_type'} = $data->{'Glib::ParamSpec'}{'xsubs'}[29]{'return_type'};
$data->{'Glib::ParamSpec'}{'xsubs'}[30]{'preprocessor_conditionals'} = $data->{'Glib::ParamSpec'}{'xsubs'}[29]{'preprocessor_conditionals'};
$data->{'Glib::ParamSpec'}{'xsubs'}[30]{'alias'} = $data->{'Glib::ParamSpec'}{'xsubs'}[29]{'alias'};
$data->{'Glib::Log'}{'xsubs'}[8]{'preprocessor_conditionals'} = $data->{'Glib::Log'}{'xsubs'}[7]{'preprocessor_conditionals'};
$data->{'Glib::Log'}{'xsubs'}[8]{'alias'} = $data->{'Glib::Log'}{'xsubs'}[7]{'alias'};
$data->{'Glib::Log'}{'xsubs'}[9]{'preprocessor_conditionals'} = $data->{'Glib::Log'}{'xsubs'}[7]{'preprocessor_conditionals'};
$data->{'Glib::Log'}{'xsubs'}[9]{'alias'} = $data->{'Glib::Log'}{'xsubs'}[7]{'alias'};
$data->{'Glib::Log'}{'xsubs'}[10]{'preprocessor_conditionals'} = $data->{'Glib::Log'}{'xsubs'}[7]{'preprocessor_conditionals'};
$data->{'Glib::Log'}{'xsubs'}[10]{'alias'} = $data->{'Glib::Log'}{'xsubs'}[7]{'alias'};

1;
